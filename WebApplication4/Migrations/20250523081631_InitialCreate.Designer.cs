// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication4.Models;

#nullable disable

namespace WebApplication4.Migrations
{
    [DbContext(typeof(InvoiceSystemrahtkContext))]
    [Migration("20250523081631_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "6.0.35")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("WebApplication4.Models.AccountMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("ChildAccountId")
                        .HasColumnType("int")
                        .HasColumnName("child_account_id");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("transaction_type");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChildAccountId" }, "child_account_id");

                    b.ToTable("account_mappings", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("enum('أصول','خصوم','حقوق ملكية','إيرادات','مصروفات')")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("account_type", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.AccountTypeMovement", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("account_type_id");

                    b.Property<string>("IncreaseBy")
                        .IsRequired()
                        .HasColumnType("enum('debit','credit')")
                        .HasColumnName("increase_by");

                    b.HasKey("AccountTypeId")
                        .HasName("PRIMARY");

                    b.ToTable("account_type_movement", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Adjustment", b =>
                {
                    b.Property<int>("AdjustmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdjustmentID");

                    b.Property<DateTime?>("AdjustmentDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AdjustmentId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID");

                    b.HasIndex(new[] { "UserId" }, "fk_adjustments_users");

                    b.ToTable("adjustments", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Adjustmentproduct", b =>
                {
                    b.Property<int>("AdjustmentProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdjustmentProductID");

                    b.Property<int?>("ActualQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("AdjustmentId")
                        .HasColumnType("int")
                        .HasColumnName("AdjustmentID");

                    b.Property<int?>("Balanced")
                        .HasColumnType("int");

                    b.Property<int?>("Difference")
                        .HasColumnType("int");

                    b.Property<int?>("InventoryId")
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.HasKey("AdjustmentProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AdjustmentId" }, "AdjustmentID");

                    b.HasIndex(new[] { "InventoryId" }, "InventoryID");

                    b.HasIndex(new[] { "ProductId" }, "ProductID");

                    b.ToTable("adjustmentproducts", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("BranchStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('نشط','غير نشط')")
                        .HasDefaultValueSql("'نشط'");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("MasterBranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("BranchId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_branches_users");

                    b.ToTable("branches", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Cashandbankaccount", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("enum('خزينة','حساب بنكي')");

                    b.Property<decimal>("Balance")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("ChildAccountId")
                        .HasColumnType("int")
                        .HasColumnName("child_account_id");

                    b.Property<int?>("CountryCurrencyId")
                        .HasColumnType("int")
                        .HasColumnName("CountryCurrencyID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Iban")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IBAN");

                    b.Property<bool?>("IsAccountingCodeEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("ShortName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('نشط','غير نشط')")
                        .HasDefaultValueSql("'نشط'");

                    b.Property<string>("SwiftCode")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountNumber" }, "AccountNumber")
                        .IsUnique();

                    b.HasIndex(new[] { "BranchId" }, "BranchID");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID1");

                    b.HasIndex(new[] { "CountryCurrencyId" }, "fk_CashAndBankAccount_CountryCurrency");

                    b.HasIndex(new[] { "ChildAccountId" }, "fk_cashandbank_child_account");

                    b.HasIndex(new[] { "UserId" }, "fk_cashandbankaccounts_users");

                    b.ToTable("cashandbankaccounts", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ChildAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int>("ParentAccountId")
                        .HasColumnType("int")
                        .HasColumnName("parent_account_id");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID");

                    b.HasIndex(new[] { "ParentAccountId" }, "parent_account_id");

                    b.HasIndex(new[] { "Name" }, "unique_child_account_name")
                        .IsUnique();

                    b.ToTable("child_account", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Childbalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("balance");

                    b.Property<int>("ChildAccountId")
                        .HasColumnType("int")
                        .HasColumnName("child_account_id");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChildAccountId" }, "child_account_id")
                        .HasDatabaseName("child_account_id1");

                    b.HasIndex(new[] { "UserId", "ChildAccountId" }, "idx_childbalances_userid_childaccountid")
                        .IsUnique();

                    b.ToTable("childbalances", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Costcenter", b =>
                {
                    b.Property<int>("CostCenterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CostCenterID");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CenterName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CostCenterId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BranchId" }, "FK_CostCenter_Branch");

                    b.HasIndex(new[] { "UserId" }, "FK_CostCenter_User");

                    b.ToTable("costcenters", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Countrycurrency", b =>
                {
                    b.Property<int>("CountryCurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CountryCurrencyID");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CurrencyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("CountryCurrencyId")
                        .HasName("PRIMARY");

                    b.ToTable("countrycurrency", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("ContactInfo")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CustomerId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "fk_customers_users");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<ulong>("AllowSystemAccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Attachments")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<TimeOnly?>("AttendanceTime")
                        .HasColumnType("time");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<TimeOnly?>("DepartureTime")
                        .HasColumnType("time");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Role")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<decimal>("Salary")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("SecondaryMobileNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("EmployeeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BranchId" }, "FK_Employees_Branches");

                    b.HasIndex(new[] { "StorehouseId" }, "FK_Employees_Storehouse");

                    b.HasIndex(new[] { "UserId" }, "FK_Employees_Users");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Exchange", b =>
                {
                    b.Property<int>("ExchangeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExchangeID");

                    b.Property<int>("AccountId")
                        .HasColumnType("int")
                        .HasColumnName("AccountID");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenterID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("text");

                    b.Property<DateTime>("ExchangeDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ExchangeType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("enum('صرف','قبض')");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("ExchangeId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "AccountId" }, "FK_Exchange_BankAccount");

                    b.HasIndex(new[] { "CostCenterId" }, "FK_Exchange_CostCenter");

                    b.HasIndex(new[] { "CustomerId" }, "FK_Exchange_Customer");

                    b.HasIndex(new[] { "UserId" }, "FK_Exchange_User");

                    b.HasIndex(new[] { "VendorId" }, "FK_Exchange_Vendor");

                    b.ToTable("exchange", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ExchangeChildAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int>("ChildAccountId")
                        .HasColumnType("int");

                    b.Property<int>("ExchangeId")
                        .HasColumnType("int")
                        .HasColumnName("ExchangeID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ChildAccountId" }, "ChildAccountId");

                    b.HasIndex(new[] { "ExchangeId" }, "idx_exchange_child_accounts_exchangeid");

                    b.ToTable("exchange_child_accounts", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Inventory", b =>
                {
                    b.Property<int>("InventoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InventoryID");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("IncomingQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int>("OutgoingQuantity")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int?>("ReferenceId")
                        .HasColumnType("int")
                        .HasColumnName("ReferenceID");

                    b.Property<string>("ReferenceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Invoice','Adjustment','Transfer','Order')")
                        .HasDefaultValueSql("'Invoice'");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionID");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("InventoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "FK_Inventory_Employee");

                    b.HasIndex(new[] { "SessionId" }, "FK_Inventory_Session");

                    b.HasIndex(new[] { "ProductId" }, "ProductID")
                        .HasDatabaseName("ProductID1");

                    b.HasIndex(new[] { "OrderId" }, "fk_inventory_order");

                    b.HasIndex(new[] { "StorehouseId" }, "fk_inventory_storehouse");

                    b.HasIndex(new[] { "UserId" }, "fk_inventory_user");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CartId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CartID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("InvoiceBankAccountId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceBankAccountID");

                    b.Property<int?>("InvoiceCashAccountId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceCashAccountID");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime");

                    b.Property<string>("InvoiceType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('شراء','بيع','مرتجع')")
                        .HasDefaultValueSql("'بيع'");

                    b.Property<int?>("ItemsCount")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('نقدي','تحويل بنكي','بطاقة ائتمانية','محفظة إلكترونية')")
                        .HasDefaultValueSql("'نقدي'");

                    b.Property<int?>("Posid")
                        .HasColumnType("int")
                        .HasColumnName("POSID");

                    b.Property<DateTime?>("PrintedAt")
                        .HasColumnType("datetime");

                    b.Property<int?>("PrintedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('مدفوعة','غير مدفوعة','ملغاة')")
                        .HasDefaultValueSql("'غير مدفوعة'");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<string>("SubscriptionPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Basic','Standard','Premium')")
                        .HasDefaultValueSql("'Basic'");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalAmount")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasComputedColumnSql("`Subtotal` + coalesce(`VATAmount`,0)", true);

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("Vatamount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("VATAmount");

                    b.Property<decimal>("Vatrate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("VATRate")
                        .HasDefaultValueSql("'15.00'");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("InvoiceId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerID");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID2");

                    b.HasIndex(new[] { "CartId" }, "FK_Invoices_Cart");

                    b.HasIndex(new[] { "Posid" }, "FK_Invoices_POS");

                    b.HasIndex(new[] { "SessionId" }, "FK_Invoices_Session");

                    b.HasIndex(new[] { "VendorId" }, "VendorID");

                    b.HasIndex(new[] { "InvoiceBankAccountId" }, "fk_invoice_bank_account");

                    b.HasIndex(new[] { "BranchId" }, "fk_invoice_branch");

                    b.HasIndex(new[] { "InvoiceCashAccountId" }, "fk_invoice_cash_account");

                    b.HasIndex(new[] { "UserId" }, "fk_invoice_user");

                    b.HasIndex(new[] { "StorehouseId" }, "fk_invoices_storehouse");

                    b.ToTable("invoices", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Invoicedetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<string>("CartId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CartID")
                        .HasComment("References the original cart");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("InvoiceTyping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('شراء','بيع','مرتجع من الشراء','مرتجع من البيع')")
                        .HasDefaultValueSql("'بيع'");

                    b.Property<decimal>("LineTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("VatAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("DetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CartId" }, "FK_InvoiceDetails_Cart");

                    b.HasIndex(new[] { "InvoiceId" }, "InvoiceID");

                    b.HasIndex(new[] { "ProductId" }, "ProductID")
                        .HasDatabaseName("ProductID2");

                    b.ToTable("invoicedetails", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.JournalEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("ChildAccountId")
                        .HasColumnType("int")
                        .HasColumnName("child_account_id");

                    b.Property<int?>("CostCenterId")
                        .HasColumnType("int")
                        .HasColumnName("CostCenterID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("CreditAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("credit_amount");

                    b.Property<decimal>("DebitAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("debit_amount");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("EntryDate")
                        .HasColumnType("date")
                        .HasColumnName("entry_date");

                    b.Property<int?>("ExchangeId")
                        .HasColumnType("int")
                        .HasColumnName("ExchangeID");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("invoiceid");

                    b.Property<string>("InvoiceType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("invoicetype");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID1");

                    b.HasIndex(new[] { "CostCenterId" }, "fk_costcenter");

                    b.HasIndex(new[] { "ChildAccountId" }, "fk_journal_child_account");

                    b.HasIndex(new[] { "ExchangeId" }, "idx_journal_entry_exchangeid");

                    b.ToTable("journal_entry", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("OrderID");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("enum('اضافه','صرف','تحويل')");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<decimal>("Total")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("OrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerID")
                        .HasDatabaseName("CustomerID1");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID3");

                    b.HasIndex(new[] { "ProductId" }, "ProductID")
                        .HasDatabaseName("ProductID3");

                    b.HasIndex(new[] { "StorehouseId" }, "StorehouseID");

                    b.HasIndex(new[] { "UserId" }, "fk_orders_users");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ParentAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int")
                        .HasColumnName("account_type_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID2");

                    b.HasIndex(new[] { "AccountTypeId" }, "account_type_id");

                    b.ToTable("parent_account", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Payment", b =>
                {
                    b.Property<int>("Payid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("payid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("Notes")
                        .HasColumnType("text")
                        .HasColumnName("notes");

                    b.Property<DateOnly>("Paydate")
                        .HasColumnType("date")
                        .HasColumnName("paydate");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Draft','Pending','Paid','Partially Paid','Cancelled')")
                        .HasColumnName("payment_status")
                        .HasDefaultValueSql("'Draft'");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("total_amount");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("Payid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerID")
                        .HasDatabaseName("CustomerID2");

                    b.HasIndex(new[] { "InvoiceId" }, "FK_Payments_Invoices");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID3");

                    b.HasIndex(new[] { "VendorId" }, "VendorID")
                        .HasDatabaseName("VendorID1");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Paymentdetail", b =>
                {
                    b.Property<int>("PaydetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("paydetail_id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("DueDate")
                        .HasColumnType("date")
                        .HasColumnName("due_date");

                    b.Property<bool?>("IsPaid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paid")
                        .HasDefaultValueSql("'0'");

                    b.Property<DateOnly?>("PaidDate")
                        .HasColumnType("date")
                        .HasColumnName("paid_date");

                    b.Property<int>("Payid")
                        .HasColumnType("int")
                        .HasColumnName("payid");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("PaydetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID4");

                    b.HasIndex(new[] { "Payid" }, "payid");

                    b.ToTable("paymentdetails", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Po", b =>
                {
                    b.Property<int>("Posid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("POSID");

                    b.Property<string>("Attachments")
                        .HasColumnType("json");

                    b.Property<int?>("BankAccountId")
                        .HasColumnType("int")
                        .HasColumnName("BankAccountID");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<string>("CartId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CartID");

                    b.Property<int?>("CashAccountId")
                        .HasColumnType("int")
                        .HasColumnName("CashAccountID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Posname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("POSName");

                    b.Property<string>("ReferenceNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('نشطة','غير نشطة')")
                        .HasDefaultValueSql("'نشطة'");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("Posid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BankAccountId" }, "BankAccountID");

                    b.HasIndex(new[] { "BranchId" }, "BranchID")
                        .HasDatabaseName("BranchID1");

                    b.HasIndex(new[] { "CashAccountId" }, "CashAccountID");

                    b.HasIndex(new[] { "CartId" }, "FK_Transactions_Cart");

                    b.HasIndex(new[] { "SessionId" }, "FK_Transactions_Session");

                    b.HasIndex(new[] { "StorehouseId" }, "StorehouseID")
                        .HasDatabaseName("StorehouseID1");

                    b.HasIndex(new[] { "UserId" }, "fk_pos_users");

                    b.ToTable("pos", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.PosCart", b =>
                {
                    b.Property<string>("CartId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("CartID");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<DateTime>("AddedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("DiscountPercent")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValueSql("'0.00'");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SessionId")
                        .HasColumnType("int")
                        .HasColumnName("SessionID");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Active','Completed','Cancelled')")
                        .HasDefaultValueSql("'Active'");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("CartId", "ProductId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "ProductId" }, "idx_cart_product");

                    b.HasIndex(new[] { "SessionId", "Status" }, "idx_cart_session");

                    b.ToTable("pos_carts", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.PosPaymentMethod", b =>
                {
                    b.Property<int>("MethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MethodID");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MethodType")
                        .IsRequired()
                        .HasColumnType("enum('Cash','CreditCard','DebitCard','MobilePayment','BankTransfer','Voucher')");

                    b.HasKey("MethodId")
                        .HasName("PRIMARY");

                    b.ToTable("pos_payment_methods", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.PosSession", b =>
                {
                    b.Property<int>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SessionID");

                    b.Property<int>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("EndingCash")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Posid")
                        .HasColumnType("int")
                        .HasColumnName("POSID");

                    b.Property<DateTime>("StartTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal>("StartingCash")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Active','Closed','Suspended')")
                        .HasDefaultValueSql("'Active'");

                    b.Property<int>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("SessionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BranchId" }, "BranchID")
                        .HasDatabaseName("BranchID2");

                    b.HasIndex(new[] { "Posid" }, "POSID");

                    b.HasIndex(new[] { "StorehouseId" }, "StorehouseID")
                        .HasDatabaseName("StorehouseID2");

                    b.HasIndex(new[] { "UserId" }, "fk_pos_sessions_users");

                    b.HasIndex(new[] { "EmployeeId" }, "idx_session_employee");

                    b.HasIndex(new[] { "Status" }, "idx_session_status");

                    b.ToTable("pos_sessions", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.PosTransaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransactionID");

                    b.Property<decimal>("AmountPaid")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("PaymentMethod")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('نقدي','تحويل بنكي','بطاقة ائتمانية','محفظة إلكترونية')")
                        .HasDefaultValueSql("'نقدي'");

                    b.HasKey("TransactionId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID4");

                    b.HasIndex(new[] { "InvoiceId" }, "InvoiceID")
                        .HasDatabaseName("InvoiceID1");

                    b.ToTable("pos_transactions", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Balance")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<byte[]>("Image")
                        .HasColumnType("mediumblob");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateOnly?>("LastRestocked")
                        .HasColumnType("date");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("Qrcode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("QRCode");

                    b.Property<int>("RepurchasePoint")
                        .HasColumnType("int");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("Vatrate")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("VATRate")
                        .HasDefaultValueSql("'0.00'");

                    b.HasKey("ProductId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CategoryId" }, "FK_Products_Category");

                    b.HasIndex(new[] { "StorehouseId" }, "fk_products_storehouse");

                    b.HasIndex(new[] { "UserId" }, "fk_products_users");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.ProductCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CategoryID");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("ParentID");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("CategoryId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ParentId" }, "ParentID");

                    b.HasIndex(new[] { "UserId" }, "fk_product_categories_users");

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Purchaseorder", b =>
                {
                    b.Property<int>("PurchaseOrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateOnly>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int");

                    b.Property<DateOnly>("PurchaseOrderDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('مفتوح','مغلق','ملغى')")
                        .HasDefaultValueSql("'مفتوح'");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("Vatamount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("VATAmount");

                    b.Property<decimal>("Vatrate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("VATRate");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.HasKey("PurchaseOrderId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BranchId" }, "BranchID")
                        .HasDatabaseName("BranchID3");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID5");

                    b.HasIndex(new[] { "StorehouseId" }, "StorehouseID")
                        .HasDatabaseName("StorehouseID3");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID5");

                    b.HasIndex(new[] { "VendorId" }, "VendorID")
                        .HasDatabaseName("VendorID2");

                    b.ToTable("purchaseorders", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Purchaseorderdetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<decimal>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DiscountType")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("LineTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int")
                        .HasColumnName("PurchaseOrderID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("VatAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("DetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "ProductID")
                        .HasDatabaseName("ProductID4");

                    b.HasIndex(new[] { "PurchaseOrderId" }, "PurchaseOrderID");

                    b.ToTable("purchaseorderdetails", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Quotation", b =>
                {
                    b.Property<int>("QuotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuotationID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("CustomerID");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<int>("ItemsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("QuotationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('غير مفوتر','مفوتر','ملغاة')")
                        .HasDefaultValueSql("'غير مفوتر'");

                    b.Property<int?>("StorehouseId")
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<decimal>("Subtotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("TotalAmount")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<decimal?>("Vatamount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("VATAmount");

                    b.Property<decimal>("Vatrate")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("VATRate");

                    b.HasKey("QuotationId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BranchId" }, "BranchID")
                        .HasDatabaseName("BranchID4");

                    b.HasIndex(new[] { "CustomerId" }, "CustomerID")
                        .HasDatabaseName("CustomerID3");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID6");

                    b.HasIndex(new[] { "InvoiceId" }, "InvoiceID")
                        .HasDatabaseName("InvoiceID2");

                    b.HasIndex(new[] { "StorehouseId" }, "StorehouseID")
                        .HasDatabaseName("StorehouseID4");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID6");

                    b.ToTable("quotations", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Quotationdetail", b =>
                {
                    b.Property<int>("DetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DetailID");

                    b.Property<decimal>("Discount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('percentage','amount')")
                        .HasDefaultValueSql("'amount'");

                    b.Property<decimal?>("LineTotal")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnName("ProductID");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("QuotationId")
                        .HasColumnType("int")
                        .HasColumnName("QuotationID");

                    b.Property<decimal?>("TotalWithVat")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal?>("VatAmount")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("DetailId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "ProductId" }, "ProductID")
                        .HasDatabaseName("ProductID5");

                    b.HasIndex(new[] { "QuotationId" }, "QuotationID");

                    b.ToTable("quotationdetails", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Shift", b =>
                {
                    b.Property<int>("ShiftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ShiftID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("Posid")
                        .HasColumnType("int")
                        .HasColumnName("POSID");

                    b.Property<string>("RepeatDays")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("RepeatWeekly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("ShiftHours")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ShiftId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID7");

                    b.HasIndex(new[] { "Posid" }, "POSID")
                        .HasDatabaseName("POSID1");

                    b.HasIndex(new[] { "UserId" }, "fk_shifts_users");

                    b.ToTable("shifts", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Sitestat", b =>
                {
                    b.Property<int>("StatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatID");

                    b.Property<DateTime?>("LastUpdated")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("PageName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<int>("Visitors")
                        .HasColumnType("int");

                    b.HasKey("StatId")
                        .HasName("PRIMARY");

                    b.ToTable("sitestats", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Storehouse", b =>
                {
                    b.Property<int>("StorehouseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StorehouseID");

                    b.Property<int?>("BranchId")
                        .HasColumnType("int")
                        .HasColumnName("BranchID");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CurrentQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("DetailedLocation")
                        .HasColumnType("text");

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool?>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("StorehouseName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("SubLocation")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("StorehouseId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "BranchId" }, "FK_Storehouse_Branches");

                    b.HasIndex(new[] { "UserId" }, "fk_storehouse_users");

                    b.ToTable("storehouse", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Transfer", b =>
                {
                    b.Property<int>("TransferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TransferID");

                    b.Property<decimal>("Amount")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<int?>("FromAccountId")
                        .HasColumnType("int")
                        .HasColumnName("FromAccountID");

                    b.Property<int?>("InvoiceId")
                        .HasColumnType("int")
                        .HasColumnName("InvoiceID");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("ToAccountId")
                        .HasColumnType("int")
                        .HasColumnName("ToAccountID");

                    b.Property<DateTime?>("TransferDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('اضافة','صرف')");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("TransferId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID8");

                    b.HasIndex(new[] { "InvoiceId" }, "InvoiceID")
                        .HasDatabaseName("InvoiceID3");

                    b.HasIndex(new[] { "UserId" }, "fk_transfer_user");

                    b.HasIndex(new[] { "FromAccountId" }, "fk_transfers_fromaccount");

                    b.HasIndex(new[] { "ToAccountId" }, "fk_transfers_toaccount");

                    b.ToTable("transfers", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.TriggerLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("action");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<int?>("ChildAccountId")
                        .HasColumnType("int")
                        .HasColumnName("child_account_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("TriggerName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("trigger_name");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("trigger_log", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<bool?>("AutoRenewal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PaymentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Active','Pending','Expired')")
                        .HasDefaultValueSql("'Active'");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly?>("SubscriptionEndDate")
                        .HasColumnType("date");

                    b.Property<string>("SubscriptionPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("enum('Light','Standard','Professional','Advanced')")
                        .HasDefaultValueSql("'Light'");

                    b.Property<DateOnly?>("SubscriptionStartDate")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Email" }, "Email")
                        .IsUnique();

                    b.HasIndex(new[] { "Username" }, "Username")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.Vendor", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("VendorID");

                    b.Property<string>("Classification")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("CommercialRegister")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<decimal?>("CreditLimit")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.Property<string>("Currency")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)")
                        .HasDefaultValueSql("'SAR'");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("EmployeeID");

                    b.Property<string>("Location")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber1")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("TaxableCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<string>("VendorName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("VendorId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "EmployeeId" }, "EmployeeID")
                        .HasDatabaseName("EmployeeID9");

                    b.HasIndex(new[] { "UserId" }, "UserID")
                        .HasDatabaseName("UserID7");

                    b.ToTable("vendors", (string)null);
                });

            modelBuilder.Entity("WebApplication4.Models.AccountMapping", b =>
                {
                    b.HasOne("WebApplication4.Models.ChildAccount", "ChildAccount")
                        .WithMany("AccountMappings")
                        .HasForeignKey("ChildAccountId")
                        .IsRequired()
                        .HasConstraintName("account_mappings_ibfk_1");

                    b.Navigation("ChildAccount");
                });

            modelBuilder.Entity("WebApplication4.Models.AccountTypeMovement", b =>
                {
                    b.HasOne("WebApplication4.Models.AccountType", "AccountType")
                        .WithOne("AccountTypeMovement")
                        .HasForeignKey("WebApplication4.Models.AccountTypeMovement", "AccountTypeId")
                        .IsRequired()
                        .HasConstraintName("account_type_movement_ibfk_1");

                    b.Navigation("AccountType");
                });

            modelBuilder.Entity("WebApplication4.Models.Adjustment", b =>
                {
                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Adjustments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("adjustments_ibfk_1");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Adjustments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_adjustments_users");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Adjustmentproduct", b =>
                {
                    b.HasOne("WebApplication4.Models.Adjustment", "Adjustment")
                        .WithMany("Adjustmentproducts")
                        .HasForeignKey("AdjustmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("adjustmentproducts_ibfk_1");

                    b.HasOne("WebApplication4.Models.Inventory", "Inventory")
                        .WithMany("Adjustmentproducts")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("adjustmentproducts_ibfk_3");

                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("Adjustmentproducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("adjustmentproducts_ibfk_2");

                    b.Navigation("Adjustment");

                    b.Navigation("Inventory");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication4.Models.Branch", b =>
                {
                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Branches")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_branches_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Cashandbankaccount", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Cashandbankaccounts")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("cashandbankaccounts_ibfk_2");

                    b.HasOne("WebApplication4.Models.ChildAccount", "ChildAccount")
                        .WithMany("Cashandbankaccounts")
                        .HasForeignKey("ChildAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_cashandbank_child_account");

                    b.HasOne("WebApplication4.Models.Countrycurrency", "CountryCurrency")
                        .WithMany("Cashandbankaccounts")
                        .HasForeignKey("CountryCurrencyId")
                        .HasConstraintName("fk_CashAndBankAccount_CountryCurrency");

                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Cashandbankaccounts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("cashandbankaccounts_ibfk_1");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Cashandbankaccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_cashandbankaccounts_users");

                    b.Navigation("Branch");

                    b.Navigation("ChildAccount");

                    b.Navigation("CountryCurrency");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.ChildAccount", b =>
                {
                    b.HasOne("WebApplication4.Models.ParentAccount", "ParentAccount")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("ParentAccountId")
                        .IsRequired()
                        .HasConstraintName("child_account_ibfk_1");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("ChildAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("child_account_ibfk_2");

                    b.Navigation("ParentAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Childbalance", b =>
                {
                    b.HasOne("WebApplication4.Models.ChildAccount", "ChildAccount")
                        .WithMany("Childbalances")
                        .HasForeignKey("ChildAccountId")
                        .IsRequired()
                        .HasConstraintName("childbalances_ibfk_2");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Childbalances")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("childbalances_ibfk_1");

                    b.Navigation("ChildAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Costcenter", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Costcenters")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("FK_CostCenter_Branch");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Costcenters")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CostCenter_User");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Customer", b =>
                {
                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Customers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_customers_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Employee", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Employees")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employees_Branches");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Employees")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Employees_Storehouse");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Employees")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Employees_Users");

                    b.Navigation("Branch");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Exchange", b =>
                {
                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "Account")
                        .WithMany("Exchanges")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Exchange_BankAccount");

                    b.HasOne("WebApplication4.Models.Costcenter", "CostCenter")
                        .WithMany("Exchanges")
                        .HasForeignKey("CostCenterId")
                        .HasConstraintName("FK_Exchange_CostCenter");

                    b.HasOne("WebApplication4.Models.Customer", "Customer")
                        .WithMany("Exchanges")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Exchange_Customer");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Exchanges")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Exchange_User");

                    b.HasOne("WebApplication4.Models.Vendor", "Vendor")
                        .WithMany("Exchanges")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("FK_Exchange_Vendor");

                    b.Navigation("Account");

                    b.Navigation("CostCenter");

                    b.Navigation("Customer");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WebApplication4.Models.ExchangeChildAccount", b =>
                {
                    b.HasOne("WebApplication4.Models.ChildAccount", "ChildAccount")
                        .WithMany("ExchangeChildAccounts")
                        .HasForeignKey("ChildAccountId")
                        .IsRequired()
                        .HasConstraintName("exchange_child_accounts_ibfk_2");

                    b.HasOne("WebApplication4.Models.Exchange", "Exchange")
                        .WithMany("ExchangeChildAccounts")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exchange_child_accounts_ibfk_1");

                    b.Navigation("ChildAccount");

                    b.Navigation("Exchange");
                });

            modelBuilder.Entity("WebApplication4.Models.Inventory", b =>
                {
                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Inventories")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK_Inventory_Employee");

                    b.HasOne("WebApplication4.Models.Order", "Order")
                        .WithMany("Inventories")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_inventory_order");

                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("Inventories")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("inventory_ibfk_1");

                    b.HasOne("WebApplication4.Models.PosSession", "Session")
                        .WithMany("Inventories")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_Inventory_Session");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Inventories")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_inventory_storehouse");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_inventory_user");

                    b.Navigation("Employee");

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("Session");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Invoice", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Invoices")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_invoice_branch");

                    b.HasOne("WebApplication4.Models.Customer", "Customer")
                        .WithMany("Invoices")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("invoices_ibfk_1");

                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Invoices")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("invoices_ibfk_2");

                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "InvoiceBankAccount")
                        .WithMany("InvoiceInvoiceBankAccounts")
                        .HasForeignKey("InvoiceBankAccountId")
                        .HasConstraintName("fk_invoice_bank_account");

                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "InvoiceCashAccount")
                        .WithMany("InvoiceInvoiceCashAccounts")
                        .HasForeignKey("InvoiceCashAccountId")
                        .HasConstraintName("fk_invoice_cash_account");

                    b.HasOne("WebApplication4.Models.Po", "Pos")
                        .WithMany("Invoices")
                        .HasForeignKey("Posid")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Invoices_POS");

                    b.HasOne("WebApplication4.Models.PosSession", "Session")
                        .WithMany("Invoices")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_Invoices_Session");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Invoices")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_invoices_storehouse");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Invoices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_invoice_user");

                    b.HasOne("WebApplication4.Models.Vendor", "Vendor")
                        .WithMany("Invoices")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("invoices_ibfk_3");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("InvoiceBankAccount");

                    b.Navigation("InvoiceCashAccount");

                    b.Navigation("Pos");

                    b.Navigation("Session");

                    b.Navigation("Storehouse");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WebApplication4.Models.Invoicedetail", b =>
                {
                    b.HasOne("WebApplication4.Models.Invoice", "Invoice")
                        .WithMany("Invoicedetails")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("invoicedetails_ibfk_1");

                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("Invoicedetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("invoicedetails_ibfk_2");

                    b.Navigation("Invoice");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebApplication4.Models.JournalEntry", b =>
                {
                    b.HasOne("WebApplication4.Models.ChildAccount", "ChildAccount")
                        .WithMany("JournalEntries")
                        .HasForeignKey("ChildAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_journal_child_account");

                    b.HasOne("WebApplication4.Models.Exchange", "Exchange")
                        .WithMany("JournalEntries")
                        .HasForeignKey("ExchangeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_journal_entry_exchange");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("JournalEntries")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("journal_entry_ibfk_1");

                    b.Navigation("ChildAccount");

                    b.Navigation("Exchange");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Order", b =>
                {
                    b.HasOne("WebApplication4.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("orders_ibfk_1");

                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("orders_ibfk_4");

                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("orders_ibfk_3");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Orders")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("orders_ibfk_2");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_orders_users");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Product");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.ParentAccount", b =>
                {
                    b.HasOne("WebApplication4.Models.AccountType", "AccountType")
                        .WithMany("ParentAccounts")
                        .HasForeignKey("AccountTypeId")
                        .IsRequired()
                        .HasConstraintName("parent_account_ibfk_1");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("ParentAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("parent_account_ibfk_2");

                    b.Navigation("AccountType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Payment", b =>
                {
                    b.HasOne("WebApplication4.Models.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("payments_ibfk_1");

                    b.HasOne("WebApplication4.Models.Invoice", "Invoice")
                        .WithMany("Payments")
                        .HasForeignKey("InvoiceId")
                        .HasConstraintName("FK_Payments_Invoices");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("payments_ibfk_3");

                    b.HasOne("WebApplication4.Models.Vendor", "Vendor")
                        .WithMany("Payments")
                        .HasForeignKey("VendorId")
                        .HasConstraintName("payments_ibfk_2");

                    b.Navigation("Customer");

                    b.Navigation("Invoice");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WebApplication4.Models.Paymentdetail", b =>
                {
                    b.HasOne("WebApplication4.Models.Payment", "Pay")
                        .WithMany("Paymentdetails")
                        .HasForeignKey("Payid")
                        .IsRequired()
                        .HasConstraintName("paymentdetails_ibfk_1");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Paymentdetails")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("paymentdetails_ibfk_2");

                    b.Navigation("Pay");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Po", b =>
                {
                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "BankAccount")
                        .WithMany("PoBankAccounts")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_ibfk_3");

                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Pos")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("pos_ibfk_1");

                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "CashAccount")
                        .WithMany("PoCashAccounts")
                        .HasForeignKey("CashAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_ibfk_2");

                    b.HasOne("WebApplication4.Models.PosSession", "Session")
                        .WithMany("Pos")
                        .HasForeignKey("SessionId")
                        .HasConstraintName("FK_Transactions_Session");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Pos")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_ibfk_4");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Pos")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_pos_users");

                    b.Navigation("BankAccount");

                    b.Navigation("Branch");

                    b.Navigation("CashAccount");

                    b.Navigation("Session");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.PosCart", b =>
                {
                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("PosCarts")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("pos_carts_ibfk_2");

                    b.HasOne("WebApplication4.Models.PosSession", "Session")
                        .WithMany("PosCarts")
                        .HasForeignKey("SessionId")
                        .IsRequired()
                        .HasConstraintName("pos_carts_ibfk_1");

                    b.Navigation("Product");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WebApplication4.Models.PosSession", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("PosSessions")
                        .HasForeignKey("BranchId")
                        .IsRequired()
                        .HasConstraintName("pos_sessions_ibfk_4");

                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("PosSessions")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("pos_sessions_ibfk_2");

                    b.HasOne("WebApplication4.Models.Po", "PosNavigation")
                        .WithMany("PosSessions")
                        .HasForeignKey("Posid")
                        .IsRequired()
                        .HasConstraintName("pos_sessions_ibfk_1");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("PosSessions")
                        .HasForeignKey("StorehouseId")
                        .IsRequired()
                        .HasConstraintName("pos_sessions_ibfk_3");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("PosSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_pos_sessions_users");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("PosNavigation");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.PosTransaction", b =>
                {
                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("PosTransactions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("pos_transactions_ibfk_1");

                    b.HasOne("WebApplication4.Models.Invoice", "Invoice")
                        .WithMany("PosTransactions")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("pos_transactions_ibfk_2");

                    b.Navigation("Employee");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("WebApplication4.Models.Product", b =>
                {
                    b.HasOne("WebApplication4.Models.ProductCategory", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Products_Category");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Products")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_products_storehouse");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_products_users");

                    b.Navigation("Category");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.ProductCategory", b =>
                {
                    b.HasOne("WebApplication4.Models.ProductCategory", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("product_categories_ibfk_1");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("ProductCategories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_product_categories_users");

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Purchaseorder", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Purchaseorders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchaseorders_ibfk_4");

                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Purchaseorders")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchaseorders_ibfk_2");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Purchaseorders")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchaseorders_ibfk_3");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Purchaseorders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchaseorders_ibfk_5");

                    b.HasOne("WebApplication4.Models.Vendor", "Vendor")
                        .WithMany("Purchaseorders")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("purchaseorders_ibfk_1");

                    b.Navigation("Branch");

                    b.Navigation("Employee");

                    b.Navigation("Storehouse");

                    b.Navigation("User");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("WebApplication4.Models.Purchaseorderdetail", b =>
                {
                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("Purchaseorderdetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("purchaseorderdetails_ibfk_2");

                    b.HasOne("WebApplication4.Models.Purchaseorder", "PurchaseOrder")
                        .WithMany("Purchaseorderdetails")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("purchaseorderdetails_ibfk_1");

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("WebApplication4.Models.Quotation", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Quotations")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quotations_ibfk_5");

                    b.HasOne("WebApplication4.Models.Customer", "Customer")
                        .WithMany("Quotations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quotations_ibfk_1");

                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Quotations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quotations_ibfk_2");

                    b.HasOne("WebApplication4.Models.Invoice", "Invoice")
                        .WithMany("Quotations")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quotations_ibfk_4");

                    b.HasOne("WebApplication4.Models.Storehouse", "Storehouse")
                        .WithMany("Quotations")
                        .HasForeignKey("StorehouseId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quotations_ibfk_3");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Quotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("quotations_ibfk_6");

                    b.Navigation("Branch");

                    b.Navigation("Customer");

                    b.Navigation("Employee");

                    b.Navigation("Invoice");

                    b.Navigation("Storehouse");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Quotationdetail", b =>
                {
                    b.HasOne("WebApplication4.Models.Product", "Product")
                        .WithMany("Quotationdetails")
                        .HasForeignKey("ProductId")
                        .IsRequired()
                        .HasConstraintName("quotationdetails_ibfk_2");

                    b.HasOne("WebApplication4.Models.Quotation", "Quotation")
                        .WithMany("Quotationdetails")
                        .HasForeignKey("QuotationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("quotationdetails_ibfk_1");

                    b.Navigation("Product");

                    b.Navigation("Quotation");
                });

            modelBuilder.Entity("WebApplication4.Models.Shift", b =>
                {
                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Shifts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("shifts_ibfk_1");

                    b.HasOne("WebApplication4.Models.Po", "Pos")
                        .WithMany("Shifts")
                        .HasForeignKey("Posid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("shifts_ibfk_2");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Shifts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_shifts_users");

                    b.Navigation("Employee");

                    b.Navigation("Pos");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Storehouse", b =>
                {
                    b.HasOne("WebApplication4.Models.Branch", "Branch")
                        .WithMany("Storehouses")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Storehouse_Branches");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Storehouses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_storehouse_users");

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Transfer", b =>
                {
                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Transfers")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("transfers_ibfk_3");

                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "FromAccount")
                        .WithMany("TransferFromAccounts")
                        .HasForeignKey("FromAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transfers_fromaccount");

                    b.HasOne("WebApplication4.Models.Invoice", "Invoice")
                        .WithMany("Transfers")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("transfers_ibfk_4");

                    b.HasOne("WebApplication4.Models.Cashandbankaccount", "ToAccount")
                        .WithMany("TransferToAccounts")
                        .HasForeignKey("ToAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_transfers_toaccount");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Transfers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_transfer_user");

                    b.Navigation("Employee");

                    b.Navigation("FromAccount");

                    b.Navigation("Invoice");

                    b.Navigation("ToAccount");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.Vendor", b =>
                {
                    b.HasOne("WebApplication4.Models.Employee", "Employee")
                        .WithMany("Vendors")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("vendors_ibfk_2");

                    b.HasOne("WebApplication4.Models.User", "User")
                        .WithMany("Vendors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vendors_ibfk_1");

                    b.Navigation("Employee");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApplication4.Models.AccountType", b =>
                {
                    b.Navigation("AccountTypeMovement");

                    b.Navigation("ParentAccounts");
                });

            modelBuilder.Entity("WebApplication4.Models.Adjustment", b =>
                {
                    b.Navigation("Adjustmentproducts");
                });

            modelBuilder.Entity("WebApplication4.Models.Branch", b =>
                {
                    b.Navigation("Cashandbankaccounts");

                    b.Navigation("Costcenters");

                    b.Navigation("Employees");

                    b.Navigation("Invoices");

                    b.Navigation("Pos");

                    b.Navigation("PosSessions");

                    b.Navigation("Purchaseorders");

                    b.Navigation("Quotations");

                    b.Navigation("Storehouses");
                });

            modelBuilder.Entity("WebApplication4.Models.Cashandbankaccount", b =>
                {
                    b.Navigation("Exchanges");

                    b.Navigation("InvoiceInvoiceBankAccounts");

                    b.Navigation("InvoiceInvoiceCashAccounts");

                    b.Navigation("PoBankAccounts");

                    b.Navigation("PoCashAccounts");

                    b.Navigation("TransferFromAccounts");

                    b.Navigation("TransferToAccounts");
                });

            modelBuilder.Entity("WebApplication4.Models.ChildAccount", b =>
                {
                    b.Navigation("AccountMappings");

                    b.Navigation("Cashandbankaccounts");

                    b.Navigation("Childbalances");

                    b.Navigation("ExchangeChildAccounts");

                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("WebApplication4.Models.Costcenter", b =>
                {
                    b.Navigation("Exchanges");
                });

            modelBuilder.Entity("WebApplication4.Models.Countrycurrency", b =>
                {
                    b.Navigation("Cashandbankaccounts");
                });

            modelBuilder.Entity("WebApplication4.Models.Customer", b =>
                {
                    b.Navigation("Exchanges");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("WebApplication4.Models.Employee", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("Cashandbankaccounts");

                    b.Navigation("Inventories");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("PosSessions");

                    b.Navigation("PosTransactions");

                    b.Navigation("Purchaseorders");

                    b.Navigation("Quotations");

                    b.Navigation("Shifts");

                    b.Navigation("Transfers");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("WebApplication4.Models.Exchange", b =>
                {
                    b.Navigation("ExchangeChildAccounts");

                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("WebApplication4.Models.Inventory", b =>
                {
                    b.Navigation("Adjustmentproducts");
                });

            modelBuilder.Entity("WebApplication4.Models.Invoice", b =>
                {
                    b.Navigation("Invoicedetails");

                    b.Navigation("Payments");

                    b.Navigation("PosTransactions");

                    b.Navigation("Quotations");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("WebApplication4.Models.Order", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("WebApplication4.Models.ParentAccount", b =>
                {
                    b.Navigation("ChildAccounts");
                });

            modelBuilder.Entity("WebApplication4.Models.Payment", b =>
                {
                    b.Navigation("Paymentdetails");
                });

            modelBuilder.Entity("WebApplication4.Models.Po", b =>
                {
                    b.Navigation("Invoices");

                    b.Navigation("PosSessions");

                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("WebApplication4.Models.PosSession", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("Invoices");

                    b.Navigation("Pos");

                    b.Navigation("PosCarts");
                });

            modelBuilder.Entity("WebApplication4.Models.Product", b =>
                {
                    b.Navigation("Adjustmentproducts");

                    b.Navigation("Inventories");

                    b.Navigation("Invoicedetails");

                    b.Navigation("Orders");

                    b.Navigation("PosCarts");

                    b.Navigation("Purchaseorderdetails");

                    b.Navigation("Quotationdetails");
                });

            modelBuilder.Entity("WebApplication4.Models.ProductCategory", b =>
                {
                    b.Navigation("InverseParent");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebApplication4.Models.Purchaseorder", b =>
                {
                    b.Navigation("Purchaseorderdetails");
                });

            modelBuilder.Entity("WebApplication4.Models.Quotation", b =>
                {
                    b.Navigation("Quotationdetails");
                });

            modelBuilder.Entity("WebApplication4.Models.Storehouse", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Inventories");

                    b.Navigation("Invoices");

                    b.Navigation("Orders");

                    b.Navigation("Pos");

                    b.Navigation("PosSessions");

                    b.Navigation("Products");

                    b.Navigation("Purchaseorders");

                    b.Navigation("Quotations");
                });

            modelBuilder.Entity("WebApplication4.Models.User", b =>
                {
                    b.Navigation("Adjustments");

                    b.Navigation("Branches");

                    b.Navigation("Cashandbankaccounts");

                    b.Navigation("ChildAccounts");

                    b.Navigation("Childbalances");

                    b.Navigation("Costcenters");

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Exchanges");

                    b.Navigation("Inventories");

                    b.Navigation("Invoices");

                    b.Navigation("JournalEntries");

                    b.Navigation("Orders");

                    b.Navigation("ParentAccounts");

                    b.Navigation("Paymentdetails");

                    b.Navigation("Payments");

                    b.Navigation("Pos");

                    b.Navigation("PosSessions");

                    b.Navigation("ProductCategories");

                    b.Navigation("Products");

                    b.Navigation("Purchaseorders");

                    b.Navigation("Quotations");

                    b.Navigation("Shifts");

                    b.Navigation("Storehouses");

                    b.Navigation("Transfers");

                    b.Navigation("Vendors");
                });

            modelBuilder.Entity("WebApplication4.Models.Vendor", b =>
                {
                    b.Navigation("Exchanges");

                    b.Navigation("Invoices");

                    b.Navigation("Payments");

                    b.Navigation("Purchaseorders");
                });
#pragma warning restore 612, 618
        }
    }
}
