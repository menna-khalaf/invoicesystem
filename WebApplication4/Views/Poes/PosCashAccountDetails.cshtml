@model WebApplication4.Models.PosCashAccountViewModel
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>بيانات خزينة نقطة البيع</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.rtl.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@300;400;500;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #3f51b5;
            --secondary-color: #009688;
            --success-color: #4caf50;
            --danger-color: #f44336;
            --warning-color: #ff9800;
            --dark-color: #263238;
            --light-color: #f5f5f5;
            --text-color: #424242;
            --border-radius: 8px;
            --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.08);
            --transition: all 0.25s ease;
        }

        body {
            background-color: #f9f9f9;
            font-family: 'Tajawal', sans-serif;
            color: var(--text-color);
            min-height: 100vh;
            padding: 0;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 2rem 1rem;
            animation: fadeIn 0.5s ease;
        }

        @@keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .back-btn {
            display: inline-flex;
            align-items: center;
            color: var(--primary-color);
            font-weight: 600;
            text-decoration: none;
            margin-bottom: 1.5rem;
            transition: var(--transition);
            padding: 0.5rem 1rem;
            border-radius: 50px;
            background-color: rgba(63, 81, 181, 0.1);
        }

        .back-btn:hover {
            background-color: rgba(63, 81, 181, 0.2);
            transform: translateX(-5px);
        }

        .page-header {
            margin-bottom: 2rem;
            text-align: center;
        }

        .page-title {
            color: var(--dark-color);
            font-weight: 700;
            margin-bottom: 0.5rem;
            font-size: 1.75rem;
            position: relative;
            display: inline-block;
        }

        .page-title:after {
            content: '';
            position: absolute;
            bottom: -8px;
            right: 0;
            width: 50%;
            height: 3px;
            background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
            border-radius: 2px;
        }

        .cards-container {
            display: flex;
            gap: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .card {
            background: white;
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 1.75rem;
            transition: var(--transition);
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .card:hover {
            transform: translateY(-3px);
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.12);
        }

        .card-header {
            display: flex;
            align-items: center;
            margin-bottom: 1.5rem;
            padding-bottom: 0.75rem;
            border-bottom: 1px solid rgba(0, 0, 0, 0.05);
        }

        .card-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: rgba(63, 81, 181, 0.1);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-left: 0.75rem;
            color: var(--primary-color);
        }

        .card-title {
            color: var(--dark-color);
            font-weight: 600;
            margin-bottom: 0;
        }

        .data-grid {
            display: grid;
            grid-template-columns: 120px 1fr;
            gap: 1rem;
            flex-grow: 1;
        }

        .data-label {
            color: #757575;
            font-weight: 500;
            display: flex;
            align-items: center;
        }

        .data-label i {
            margin-left: 8px;
        }

        .data-value {
            color: var(--dark-color);
            font-weight: 600;
            padding: 0.5rem 0.75rem;
            background-color: var(--light-color);
            border-radius: 6px;
            border-left: 3px solid var(--primary-color);
        }

        /* Balance Card */
        .balance-card {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
            color: white;
            position: relative;
            overflow: hidden;
        }

        .balance-card::before {
            content: '';
            position: absolute;
            top: -50px;
            right: -50px;
            width: 150px;
            height: 150px;
            border-radius: 50%;
            background: rgba(255, 255, 255, 0.1);
        }

        .balance-card .card-header {
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
        }

        .balance-card .card-icon {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
        }

        .balance-card .card-title {
            color: white;
        }

        .balance-card .data-label {
            color: rgba(255, 255, 255, 0.9);
        }

        .balance-card .data-value {
            color: white;
            background-color: rgba(255, 255, 255, 0.15);
            border-left: 3px solid rgba(255, 255, 255, 0.3);
        }

        .balance-amount {
            font-size: 2.25rem;
            font-weight: 700;
            color: white;
            margin: 1.5rem 0;
            text-align: center;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .currency {
            font-size: 1.25rem;
            color: rgba(255, 255, 255, 0.9);
            margin-left: 0.5rem;
        }

        .balance-note {
            color: rgba(255, 255, 255, 0.8);
            text-align: center;
            margin-bottom: 1.5rem;
            font-size: 0.9rem;
        }

        .btn-group {
            display: flex;
            gap: 1rem;
            margin-top: auto;
        }

        .btn {
            flex: 1;
            padding: 0.75rem;
            font-weight: 600;
            border-radius: var(--border-radius);
            border: none;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .btn i {
            margin-left: 8px;
        }

        .btn-outline-light {
            background-color: transparent;
            color: white;
            border: 2px solid rgba(255, 255, 255, 0.4);
        }

        .btn-outline-light:hover {
            background-color: rgba(255, 255, 255, 0.1);
            border-color: white;
        }

        .btn-light {
            background-color: white;
            color: var(--primary-color);
        }

        .btn-light:hover {
            background-color: #f5f5f5;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .cards-container {
                flex-direction: column;
            }
            
            .container {
                padding: 1.5rem 1rem;
                max-width: 600px;
            }
            
            .data-grid {
                grid-template-columns: 1fr;
                gap: 0.5rem;
            }
            
            .btn-group {
                flex-direction: column;
            }
            
            .btn {
                width: 100%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="#" class="back-btn" onclick="history.back()">
            <i class="fas fa-arrow-right"></i> العودة
        </a>

        <div class="page-header">
            <h1 class="page-title">بيانات خزينة نقطة البيع</h1>
        </div>

        <div class="cards-container">
            <div class="card">
                <div class="card-header">
                    <div class="card-icon">
                        <i class="fas fa-cash-register"></i>
                    </div>
                    <h5 class="card-title">معلومات نقطة البيع</h5>
                </div>
                
                <div class="data-grid">
                    <div class="data-label">
                        <i class="fas fa-store-alt"></i> اسم الفرع:
                    </div>
                    <div class="data-value">@Model.BranchName</div>
                    
                    <div class="data-label">
                        <i class="fas fa-wallet"></i> اسم الخزينة:
                    </div>
                    <div class="data-value">@Model.CashAccountName</div>
                    
                    <div class="data-label">
                        <i class="fas fa-hashtag"></i> رقم الحساب:
                    </div>
                    <div class="data-value">@Model.CashAccountId</div>
                    
                    <div class="data-label">
                        <i class="fas fa-university"></i> رقم البنك:
                    </div>
                    <div class="data-value">@Model.BankAccountId</div>
                    
                    <div class="data-label">
                        <i class="fas fa-barcode"></i> الرقم المرجعي:
                    </div>
                    <div class="data-value">@Model.ReferenceNumber</div>
                </div>
            </div>

            <div class="card balance-card">
                <div class="card-header">
                    <div class="card-icon">
                        <i class="fas fa-coins"></i>
                    </div>
                    <h5 class="card-title">رصيد الخزينة الحالي</h5>
                </div>
                
                <div class="balance-amount">
                    @Model.CurrentBalance.ToString("N2")
                    <span class="currency">@Model.Currency</span>
                </div>
                
                <p class="balance-note">يرجى التحقق من صحة الرصيد قبل المتابعة في عملية فتح الجلسة</p>
                
                <div class="btn-group">
                    <button class="btn btn-outline-light" onclick="goToPosIndex()">
                        <i class="fas fa-times"></i> غير صحيح
                    </button>
                    <button class="btn btn-light" onclick="createPosSession()">
                        <i class="fas fa-check"></i> صحيح
                    </button>
                </div>
            </div>
        </div>

        <!-- Hidden Fields -->
        @Html.HiddenFor(m => m.PosId)
        @Html.HiddenFor(m => m.StorehouseId)
        @Html.HiddenFor(m => m.BranchId)
        @Html.AntiForgeryToken()
    </div>

    <!-- SweetAlert for notifications -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
    <script>
        function goToPosIndex() {
            window.location.href = '@Url.Action("Create", "PosSessions")?posId=' + @Model.PosId;
        }

        async function createPosSession() {
            const swalInstance = Swal.fire({
                title: 'جاري إنشاء الجلسة',
                html: 'الرجاء الانتظار بينما نقوم بتهيئة جلسة البيع الجديدة...',
                allowOutsideClick: false,
                didOpen: () => Swal.showLoading()
            });

            try {
                const posId = @Model.PosId;
                const storehouseId = @Model.StorehouseId;
                const branchId = @Model.BranchId;
                const startingCash = @Model.CurrentBalance;

                if (!posId || !storehouseId || !branchId) {
                    throw new Error('بيانات الجلسة غير مكتملة');
                }

                const response = await fetch('@Url.Action("CreatePosSession", "Poes")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        posId: posId,
                        storehouseId: storehouseId,
                        branchId: branchId,
                        startingCash: startingCash
                    })
                });

                const result = await response.json();

                if (!response.ok || !result.success) {
                    throw new Error(result.message || 'فشل إنشاء الجلسة');
                }

                await Swal.fire({
                    icon: 'success',
                    title: 'تم بنجاح',
                    text: 'تم إنشاء جلسة البيع بنجاح',
                    showConfirmButton: false,
                    timer: 1500
                });

                window.location.href = result.redirectUrl;
            } catch (error) {
                await swalInstance.close();
                await Swal.fire({
                    icon: 'error',
                    title: 'خطأ',
                    text: error.message || 'حدث خطأ غير متوقع أثناء إنشاء الجلسة',
                    confirmButtonText: 'حسناً',
                    confirmButtonColor: '#3f51b5'
                });
            }
        }
    </script>
</body>
</html>