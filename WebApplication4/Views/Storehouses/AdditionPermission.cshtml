@model WebApplication4.Models.AdditionPermissionViewModel

@{
    ViewBag.Title = "إذن إضافة منتج";
    Layout = null;
}

<!DOCTYPE html>
<html dir="rtl" lang="ar">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    <style>
        :root {
            --primary: #3498db;
            --primary-dark: #2980b9;
            --success: #2ecc71;
            --danger: #e74c3c;
            --warning: #f39c12;
            --dark: #2c3e50;
            --light: #f8f9fa;
            --gray: #95a5a6;
            --border: #e0e0e0;
            --card-bg: #ffffff;
            --input-bg: #ffffff;
        }

        body {
            font-family: 'Tahoma', Arial, sans-serif;
            background-color: #f5f7fa;
            padding: 20px;
            text-align: right;
        }

        .permission-container {
            max-width: 800px;
            margin: 0 auto;
        }

        .permission-card {
            background: var(--card-bg);
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
            padding: 35px;
            border-top: 5px solid var(--primary);
        }

        h2 {
            color: var(--dark);
            font-weight: 700;
            margin-bottom: 30px;
            text-align: center;
            padding-bottom: 15px;
            border-bottom: 2px solid #f1f1f1;
            position: relative;
        }

            h2:after {
                content: '';
                position: absolute;
                bottom: -2px;
                right: 0;
                width: 100px;
                height: 2px;
                background: var(--primary);
            }

        .form-group {
            margin-bottom: 25px;
        }

            .form-group label {
                font-weight: 600;
                color: var(--dark);
                margin-bottom: 8px;
                display: block;
                font-size: 0.95rem;
            }

        .form-control {
            border-radius: 6px;
            padding: 10px 15px;
            border: 1px solid var(--border);
            transition: all 0.3s;
            height: 42px;
            background-color: var(--input-bg);
            font-size: 0.95rem;
        }

            .form-control:focus {
                border-color: var(--primary);
                box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.2);
            }

        .btn-submit {
            background-color: var(--success);
            border: none;
            padding: 12px 30px;
            font-weight: 600;
            letter-spacing: 0.5px;
            transition: all 0.3s;
            border-radius: 6px;
            color: white;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            min-width: 150px;
        }

            .btn-submit:hover {
                background-color: #27ae60;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(46, 204, 113, 0.3);
                color: white;
            }

        .readonly-field {
            background-color: #f8f9fa;
            color: #555;
            border: 1px solid #e0e0e0;
        }

        .validation-message {
            color: var(--danger);
            font-size: 0.85rem;
            margin-top: 5px;
            font-weight: 500;
        }

        select.form-control {
            appearance: none;
            background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='%232c3e50' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3e%3cpolyline points='6 9 12 15 18 9'%3e%3c/polyline%3e%3c/svg%3e");
            background-repeat: no-repeat;
            background-position: left 15px center;
            background-size: 14px;
            padding-right: 15px;
        }

        .input-highlight {
            border-left: 3px solid var(--primary);
        }

        .status-badge {
            display: inline-block;
            padding: 5px 12px;
            border-radius: 20px;
            font-weight: 600;
            font-size: 0.85rem;
        }

        .status-active {
            background-color: rgba(46, 204, 113, 0.1);
            color: var(--success);
            border: 1px solid rgba(46, 204, 113, 0.3);
        }

        .status-inactive {
            background-color: rgba(231, 76, 60, 0.1);
            color: var(--danger);
            border: 1px solid rgba(231, 76, 60, 0.3);
        }

        .input-group-text {
            background-color: #e9ecef;
            border: 1px solid #ced4da;
            border-left: none;
        }

        .section-title {
            color: var(--primary);
            font-weight: 600;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px dashed #e0e0e0;
        }
    </style>
</head>
<body>
    <div class="container permission-container">
        <div class="permission-card">
            <h2><i class="fas fa-plus-circle" style="color: var(--primary); margin-left: 10px;"></i> @ViewBag.Title</h2>

            @using (Html.BeginForm("AdditionPermission", "Storehouses", FormMethod.Post))
            {
                @Html.AntiForgeryToken()

                <div class="form-group">
                    <label for="StorehouseId" style="color: var(--primary);">اختر المستودع</label>
                    <select id="StorehouseId" name="StorehouseId" class="form-control input-highlight">
                        <option value="">اختر المستودع</option>
                        @foreach (var storehouse in ViewBag.Storehouses)
                        {
                            <option value="@storehouse.StorehouseId">@storehouse.StorehouseName</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ProductID, "المنتج", new { @style = "color: var(--primary);" })
                    @Html.DropDownListFor(model => model.ProductID, ViewBag.Products as SelectList, "اختر المنتج", new { @class = "form-control input-highlight", id = "ProductID" })
                    @Html.ValidationMessageFor(model => model.ProductID, "", new { @class = "validation-message" })
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="PurchasePrice" style="color: var(--dark);">سعر الشراء</label>
                            <input type="text" id="PurchasePrice" class="form-control readonly-field" readonly />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="Balance" style="color: var(--dark);">الرصيد الحالي</label>
                            <input type="text" id="Balance" class="form-control readonly-field" readonly />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.IncomingQuantity, "الكمية الواردة", new { @style = "color: var(--primary);" })
                            @Html.TextBoxFor(model => model.IncomingQuantity, new { @class = "form-control input-highlight", id = "IncomingQuantity" })
                            @Html.ValidationMessageFor(model => model.IncomingQuantity, "", new { @class = "validation-message" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            <label for="Total" style="color: var(--dark);">الإجمالي</label>
                            <input type="text" id="Total" class="form-control readonly-field" readonly />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.DateOfPermission, "تاريخ الإذن", new { @style = "color: var(--primary);" })
                            @Html.TextBoxFor(model => model.DateOfPermission, new { @class = "form-control input-highlight", type = "date" })
                            @Html.ValidationMessageFor(model => model.DateOfPermission, "", new { @class = "validation-message" })
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.LabelFor(model => model.CustomerID, "العميل", new { @style = "color: var(--primary);" })
                            @Html.DropDownListFor(model => model.CustomerID, ViewBag.Customers as SelectList, "اختر العميل", new { @class = "form-control input-highlight" })
                            @Html.ValidationMessageFor(model => model.CustomerID, "", new { @class = "validation-message" })
                        </div>
                    </div>
                </div>

                <div class="form-group text-center mt-4">
                    <button type="submit" class="btn-submit">
                        <i class="fas fa-save" style="margin-left: 8px;"></i> حفظ البيانات
                    </button>
                </div>
            }
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            // Get references to the input fields and dropdown
            const productDropdown = $("#ProductID");
            const purchasePriceInput = $("#PurchasePrice");
            const balanceInput = $("#Balance");
            const quantityInput = $("#IncomingQuantity");
            const totalInput = $("#Total");

            // Function to calculate and update the total
            function updateTotal() {
                const price = parseFloat(purchasePriceInput.val()) || 0;
                const quantity = parseInt(quantityInput.val()) || 0;
                totalInput.val((price * quantity).toFixed(2));
            }

            // Event listener for product dropdown change
            productDropdown.change(function () {
                const productId = $(this).val();

                if (productId) {
                    $.get(`/Storehouses/GetProductDetails?productId=${productId}`)
                        .done(function (data) {
                            console.log("Response from server:", data);

                            if (data.success && data.data) {
                                purchasePriceInput.val(data.data.purchasePrice !== undefined ?
                                    parseFloat(data.data.purchasePrice).toFixed(2) : "0.00");
                                balanceInput.val(data.data.balance !== undefined ?
                                    data.data.balance : "0");
                                updateTotal();
                            } else {
                                console.error("Invalid response structure:", data);
                                resetFields();
                            }
                        })
                        .fail(function (error) {
                            console.error("Error fetching product details:", error);
                            resetFields();
                        });
                } else {
                    resetFields();
                }
            });

            // Event listener for quantity input change
            quantityInput.on("input", function () {
                updateTotal();
            });

            function resetFields() {
                purchasePriceInput.val("0.00");
                balanceInput.val("0");
                totalInput.val("0.00");
            }
        });
    </script>
</body>
</html>