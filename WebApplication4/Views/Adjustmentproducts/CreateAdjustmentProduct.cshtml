<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Adjustment Product</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #287cd4;
            --primary-light: #5d9cec;
            --primary-dark: #1a5dab;
            --accent-color: #ff7e33;
        }
        
        body {
            background: linear-gradient(135deg, #f5f7fa 0%, #e4e9f2 100%);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            min-height: 100vh;
            padding-bottom: 50px;
        }

        .card {
            border: none;
            border-radius: 12px;
            box-shadow: 0 10px 30px rgba(40, 124, 212, 0.15);
            overflow: hidden;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        .card-header {
            background: linear-gradient(to right, var(--primary-color), var(--primary-light));
            color: white;
            padding: 20px;
            border-bottom: none;
            position: relative;
            overflow: hidden;
        }

        .card-header::after {
            content: "";
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: var(--accent-color);
        }

        .card-header h2 {
            font-weight: 600;
            text-shadow: 0 2px 4px rgba(0,0,0,0.1);
            position: relative;
            z-index: 1;
        }

        .btn-primary {
            background: var(--primary-color);
            border: none;
            border-radius: 50px;
            padding: 10px 25px;
            font-weight: 500;
            letter-spacing: 0.5px;
            box-shadow: 0 4px 8px rgba(40, 124, 212, 0.3);
            transition: all 0.3s ease;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 6px 12px rgba(40, 124, 212, 0.4);
        }

        .btn-success {
            background: #2ecc71;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(46, 204, 113, 0.3);
            transition: all 0.3s ease;
        }

        .btn-success:hover {
            background: #27ae60;
            transform: scale(1.1);
        }

        .btn-danger {
            background: #e74c3c;
            border: none;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: flex;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 5px rgba(231, 76, 60, 0.3);
            transition: all 0.3s ease;
        }

        .btn-danger:hover {
            background: #c0392b;
            transform: scale(1.1);
        }

        .table {
            margin-top: 20px;
            border-collapse: separate;
            border-spacing: 0 10px;
        }

        .table th {
            background-color: var(--primary-light);
            color: white;
            font-weight: 500;
            padding: 12px;
            border: none;
        }

        .table td {
            background-color: white;
            padding: 15px;
            vertical-align: middle;
            border: none;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            transition: all 0.3s ease;
        }

        .table tr:hover td {
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            transform: translateY(-2px);
        }

        .form-select, .form-control {
            border: 1px solid #e0e6ed;
            border-radius: 6px;
            padding: 10px 15px;
            transition: all 0.3s ease;
            box-shadow: none;
        }

        .form-select:focus, .form-control:focus {
            border-color: var(--primary-light);
            box-shadow: 0 0 0 3px rgba(40, 124, 212, 0.2);
        }

        .form-control[readonly] {
            background-color: #f8fafc;
            color: #5c6b7b;
        }

        .floating-action {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 100;
        }

        .floating-btn {
            width: 60px;
            height: 60px;
            border-radius: 50%;
            background: var(--accent-color);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            box-shadow: 0 6px 15px rgba(255, 126, 51, 0.4);
            transition: all 0.3s ease;
            border: none;
        }

        .floating-btn:hover {
            transform: scale(1.1) rotate(90deg);
            background: #ff6a1a;
        }

        .animated-bg {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, 
                                      rgba(255,255,255,0.1) 0%, 
                                      rgba(255,255,255,0.3) 50%, 
                                      rgba(255,255,255,0.1) 100%);
            animation: shimmer 3s infinite;
            z-index: 0;
        }

        @@keyframes shimmer {
            0% { transform: translateX(-100%); }
            100% { transform: translateX(100%); }
        }

        .difference.positive {
            color: #2ecc71;
            font-weight: bold;
        }

        .difference.negative {
            color: #e74c3c;
            font-weight: bold;
        }

        .action-buttons {
            display: flex;
            gap: 8px;
            justify-content: center;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <div class="card">
            <div class="card-header text-center">
                <div class="animated-bg"></div>
                <h2><i class="fas fa-clipboard-check me-2"></i>انشاء جرد للمنتجات</h2>
            </div>
            <div class="card-body">
                <form id="adjustmentForm" onsubmit="saveData(event)">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="adjustmentId" value="@ViewBag.AdjustmentId" />
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>المنتج</th>
                                    <th>الكميه المخزنه</th>
                                    <th>الكميه الفعليه</th>
                                    <th>الفرق</th>
                                    <th>إجراء</th>
                                </tr>
                            </thead>
                            <tbody id="productTableBody">
                                <tr>
                                    <td>
                                        <select class="form-select product-select" onchange="updateStock(this)">
                                            <option value="">-- اختر المنتج --</option>
                                            @foreach (var item in ViewData["ProductId"] as SelectList)
                                            {
                                                int productId = Convert.ToInt32(item.Value);
                                                <option value="@productId" data-balance="@ViewBag.ProductBalances[productId]">@item.Text</option>
                                            }
                                        </select>
                                    </td>
                                    <td><input type="number" class="form-control stored-quantity" readonly></td>
                                    <td><input type="number" class="form-control actual-quantity" oninput="calculateDifference(this)"></td>
                                    <td><input type="number" class="form-control difference" readonly></td>
                                    <td class="action-buttons">
                                        <button type="button" class="btn btn-success" onclick="addRow()"><i class="fas fa-plus"></i></button>
                                        <button type="button" class="btn btn-danger" onclick="deleteRow(this)"><i class="fas fa-minus"></i></button>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    <div class="text-center mt-4">
                        <button type="submit" class="btn btn-primary px-5">
                            <i class="fas fa-save me-2"></i>حفظ
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <div class="floating-action">
        <button class="floating-btn" onclick="addRow()">
            <i class="fas fa-plus"></i>
        </button>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Function to update the stored quantity based on the selected product
        function updateStock(select) {
            let selectedOption = select.options[select.selectedIndex];
            let balance = selectedOption.getAttribute("data-balance") || 0;

            let row = select.closest("tr");
            let storedQuantityInput = row.querySelector(".stored-quantity");
            storedQuantityInput.value = balance;

            let actualQuantityInput = row.querySelector(".actual-quantity");
            if (actualQuantityInput.value) {
                calculateDifference(actualQuantityInput);
            }
        }

        // Function to calculate the difference between actual and stored quantity
        function calculateDifference(input) {
            let row = input.closest("tr");
            let storedQuantity = parseFloat(row.querySelector(".stored-quantity").value) || 0;
            let actualQuantity = parseFloat(input.value) || 0;
            let differenceInput = row.querySelector(".difference");
            let difference = actualQuantity - storedQuantity;
            
            differenceInput.value = difference;
            
            // Update styling based on difference
            differenceInput.classList.remove("positive", "negative");
            if (difference > 0) {
                differenceInput.classList.add("positive");
            } else if (difference < 0) {
                differenceInput.classList.add("negative");
            }
        }

        // Function to add a new row
        function addRow() {
            let tableBody = document.getElementById("productTableBody");
            let newRow = tableBody.rows[0].cloneNode(true); // Clone the first row

            // Clear input values in the new row
            newRow.querySelectorAll("input").forEach(input => input.value = "");
            newRow.querySelector(".product-select").value = "";
            newRow.querySelector(".difference").classList.remove("positive", "negative");

            // Add the new row to the table
            tableBody.appendChild(newRow);
            
            // Scroll to the new row
            newRow.scrollIntoView({ behavior: "smooth", block: "nearest" });
            
            // Add animation to highlight the new row
            newRow.style.animation = "highlight 1.5s";
            setTimeout(() => {
                newRow.style.animation = "";
            }, 1500);
        }

        // Function to delete a row
        function deleteRow(button) {
            let row = button.closest("tr");
            if (row && row.parentNode && row.parentNode.children.length > 1) {
                // Add fade out animation
                row.style.transition = "all 0.3s ease";
                row.style.opacity = "0";
                row.style.transform = "translateX(100px)";
                
                setTimeout(() => {
                    row.parentNode.removeChild(row);
                }, 300);
            } else {
                alert("يجب أن يبقى صف واحد على الأقل.");
            }
        }

        // Function to save data
        function saveData(event) {
            event.preventDefault();

            let data = [];
            let adjustmentId = document.getElementById("adjustmentId").value;
            let isValid = true;

            document.querySelectorAll("#productTableBody tr").forEach(row => {
                let productSelect = row.querySelector(".product-select");
                let actualQuantityInput = row.querySelector(".actual-quantity");
                let differenceInput = row.querySelector(".difference");

                if (productSelect && actualQuantityInput && differenceInput) {
                    let productId = productSelect.value;
                    let actualQuantity = actualQuantityInput.value;
                    let difference = differenceInput.value;

                    if (!productId) {
                        productSelect.focus();
                        productSelect.style.borderColor = "#e74c3c";
                        isValid = false;
                    } else {
                        productSelect.style.borderColor = "#e0e6ed";
                    }

                    if (!actualQuantity) {
                        actualQuantityInput.focus();
                        actualQuantityInput.style.borderColor = "#e74c3c";
                        isValid = false;
                    } else {
                        actualQuantityInput.style.borderColor = "#e0e6ed";
                    }

                    if (productId && actualQuantity && difference) {
                        data.push({
                            ProductId: parseInt(productId),
                            ActualQuantity: parseInt(actualQuantity),
                            Difference: parseInt(difference),
                            AdjustmentId: parseInt(adjustmentId),
                            Balanced: 0,
                            InventoryId: 1
                        });
                    }
                }
            });

            if (!isValid) {
                alert("يرجى إدخال جميع الحقول المطلوبة.");
                return;
            }

            console.log("Sending Data:", data);

            if (data.length > 0) {
                let token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                let submitBtn = document.querySelector('#adjustmentForm button[type="submit"]');
                let originalBtnText = submitBtn.innerHTML;
                
                // Show loading state
                submitBtn.disabled = true;
                submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>جاري الحفظ...';

                fetch("/AdjustmentProducts/CreateAdjustmentProduct", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": token
                    },
                    body: JSON.stringify(data)
                })
                    .then(response => response.json())
                    .then(result => {
                        console.log("Response:", result);
                        if (result.success) {
                            // Show success animation
                            submitBtn.innerHTML = '<i class="fas fa-check me-2"></i>تم الحفظ!';
                            setTimeout(() => {
                                if (result.redirectUrl) {
                                    window.location.href = result.redirectUrl;
                                }
                            }, 1500);
                        } else {
                            submitBtn.innerHTML = originalBtnText;
                            submitBtn.disabled = false;
                            alert("حدث خطأ أثناء الحفظ: " + result.message);
                        }
                    })
                    .catch(error => {
                        console.error("Error:", error);
                        submitBtn.innerHTML = originalBtnText;
                        submitBtn.disabled = false;
                        alert("حدث خطأ أثناء الحفظ: " + error.message);
                    });
            } else {
                alert("يرجى إدخال البيانات بشكل صحيح.");
            }
        }
    </script>
</body>
</html>