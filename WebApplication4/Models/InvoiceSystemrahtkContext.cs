// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApplication4.Models;

public partial class InvoiceSystemrahtkContext : DbContext
{
    public InvoiceSystemrahtkContext(DbContextOptions<InvoiceSystemrahtkContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccountMapping> AccountMappings { get; set; }

    public virtual DbSet<AccountType> AccountTypes { get; set; }

    public virtual DbSet<AccountTypeMovement> AccountTypeMovements { get; set; }

    public virtual DbSet<Adjustment> Adjustments { get; set; }

    public virtual DbSet<Adjustmentproduct> Adjustmentproducts { get; set; }

    public virtual DbSet<Branch> Branches { get; set; }

    public virtual DbSet<Cashandbankaccount> Cashandbankaccounts { get; set; }

    public virtual DbSet<ChildAccount> ChildAccounts { get; set; }

    public virtual DbSet<Childbalance> Childbalances { get; set; }

    public virtual DbSet<Costcenter> Costcenters { get; set; }

    public virtual DbSet<Countrycurrency> Countrycurrencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<Exchange> Exchanges { get; set; }

    public virtual DbSet<ExchangeChildAccount> ExchangeChildAccounts { get; set; }

    public virtual DbSet<Inventory> Inventories { get; set; }

    public virtual DbSet<Invoice> Invoices { get; set; }

    public virtual DbSet<Invoicedetail> Invoicedetails { get; set; }

    public virtual DbSet<JournalEntry> JournalEntries { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<ParentAccount> ParentAccounts { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Paymentdetail> Paymentdetails { get; set; }

    public virtual DbSet<Po> Pos { get; set; }

    public virtual DbSet<PosCart> PosCarts { get; set; }

    public virtual DbSet<PosPaymentMethod> PosPaymentMethods { get; set; }

    public virtual DbSet<PosSession> PosSessions { get; set; }

    public virtual DbSet<PosTransaction> PosTransactions { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<Purchaseorder> Purchaseorders { get; set; }

    public virtual DbSet<Purchaseorderdetail> Purchaseorderdetails { get; set; }

    public virtual DbSet<Quotation> Quotations { get; set; }

    public virtual DbSet<Quotationdetail> Quotationdetails { get; set; }

    public virtual DbSet<Shift> Shifts { get; set; }

    public virtual DbSet<Sitestat> Sitestats { get; set; }

    public virtual DbSet<Storehouse> Storehouses { get; set; }

    public virtual DbSet<Transfer> Transfers { get; set; }

    public virtual DbSet<TriggerLog> TriggerLogs { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vendor> Vendors { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<AccountMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("account_mappings");

            entity.HasIndex(e => e.ChildAccountId, "child_account_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChildAccountId).HasColumnName("child_account_id");
            entity.Property(e => e.TransactionType)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("transaction_type");

            entity.HasOne(d => d.ChildAccount).WithMany(p => p.AccountMappings)
                .HasForeignKey(d => d.ChildAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("account_mappings_ibfk_1");
        });

        modelBuilder.Entity<AccountType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("account_type");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasColumnType("enum('أصول','خصوم','حقوق ملكية','إيرادات','مصروفات')")
                .HasColumnName("name");
        });

        modelBuilder.Entity<AccountTypeMovement>(entity =>
        {
            entity.HasKey(e => e.AccountTypeId).HasName("PRIMARY");

            entity.ToTable("account_type_movement");

            entity.Property(e => e.AccountTypeId)
                .ValueGeneratedNever()
                .HasColumnName("account_type_id");
            entity.Property(e => e.IncreaseBy)
                .IsRequired()
                .HasColumnType("enum('debit','credit')")
                .HasColumnName("increase_by");

            entity.HasOne(d => d.AccountType).WithOne(p => p.AccountTypeMovement)
                .HasForeignKey<AccountTypeMovement>(d => d.AccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("account_type_movement_ibfk_1");
        });

        modelBuilder.Entity<Adjustment>(entity =>
        {
            entity.HasKey(e => e.AdjustmentId).HasName("PRIMARY");

            entity.ToTable("adjustments");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.UserId, "fk_adjustments_users");

            entity.Property(e => e.AdjustmentId).HasColumnName("AdjustmentID");
            entity.Property(e => e.AdjustmentDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Employee).WithMany(p => p.Adjustments)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("adjustments_ibfk_1");

            entity.HasOne(d => d.User).WithMany(p => p.Adjustments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_adjustments_users");
        });

        modelBuilder.Entity<Adjustmentproduct>(entity =>
        {
            entity.HasKey(e => e.AdjustmentProductId).HasName("PRIMARY");

            entity.ToTable("adjustmentproducts");

            entity.HasIndex(e => e.AdjustmentId, "AdjustmentID");

            entity.HasIndex(e => e.InventoryId, "InventoryID");

            entity.HasIndex(e => e.ProductId, "ProductID");

            entity.Property(e => e.AdjustmentProductId).HasColumnName("AdjustmentProductID");
            entity.Property(e => e.AdjustmentId).HasColumnName("AdjustmentID");
            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");

            entity.HasOne(d => d.Adjustment).WithMany(p => p.Adjustmentproducts)
                .HasForeignKey(d => d.AdjustmentId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("adjustmentproducts_ibfk_1");

            entity.HasOne(d => d.Inventory).WithMany(p => p.Adjustmentproducts)
                .HasForeignKey(d => d.InventoryId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("adjustmentproducts_ibfk_3");

            entity.HasOne(d => d.Product).WithMany(p => p.Adjustmentproducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("adjustmentproducts_ibfk_2");
        });

        modelBuilder.Entity<Branch>(entity =>
        {
            entity.HasKey(e => e.BranchId).HasName("PRIMARY");

            entity.ToTable("branches");

            entity.HasIndex(e => e.UserId, "fk_branches_users");

            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.BranchName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.BranchStatus)
                .HasDefaultValueSql("'نشط'")
                .HasColumnType("enum('نشط','غير نشط')");
            entity.Property(e => e.City)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CommercialRegister).HasMaxLength(255);
            entity.Property(e => e.Country)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.MasterBranch).HasDefaultValueSql("'0'");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Branches)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_branches_users");
        });

        modelBuilder.Entity<Cashandbankaccount>(entity =>
        {
            entity.HasKey(e => e.AccountId).HasName("PRIMARY");

            entity.ToTable("cashandbankaccounts");

            entity.HasIndex(e => e.AccountNumber, "AccountNumber").IsUnique();

            entity.HasIndex(e => e.BranchId, "BranchID");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.CountryCurrencyId, "fk_CashAndBankAccount_CountryCurrency");

            entity.HasIndex(e => e.ChildAccountId, "fk_cashandbank_child_account");

            entity.HasIndex(e => e.UserId, "fk_cashandbankaccounts_users");

            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.AccountName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.AccountNumber)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.AccountType)
                .IsRequired()
                .HasColumnType("enum('خزينة','حساب بنكي')");
            entity.Property(e => e.Balance).HasPrecision(15, 2);
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.ChildAccountId).HasColumnName("child_account_id");
            entity.Property(e => e.CountryCurrencyId).HasColumnName("CountryCurrencyID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Iban)
                .HasMaxLength(50)
                .HasColumnName("IBAN");
            entity.Property(e => e.IsAccountingCodeEnabled).HasDefaultValueSql("'0'");
            entity.Property(e => e.ShortName).HasMaxLength(100);
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'نشط'")
                .HasColumnType("enum('نشط','غير نشط')");
            entity.Property(e => e.SwiftCode).HasMaxLength(20);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Cashandbankaccounts)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("cashandbankaccounts_ibfk_2");

            entity.HasOne(d => d.ChildAccount).WithMany(p => p.Cashandbankaccounts)
                .HasForeignKey(d => d.ChildAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_cashandbank_child_account");

            entity.HasOne(d => d.CountryCurrency).WithMany(p => p.Cashandbankaccounts)
                .HasForeignKey(d => d.CountryCurrencyId)
                .HasConstraintName("fk_CashAndBankAccount_CountryCurrency");

            entity.HasOne(d => d.Employee).WithMany(p => p.Cashandbankaccounts)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("cashandbankaccounts_ibfk_1");

            entity.HasOne(d => d.User).WithMany(p => p.Cashandbankaccounts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_cashandbankaccounts_users");
        });

        modelBuilder.Entity<ChildAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("child_account");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.HasIndex(e => e.ParentAccountId, "parent_account_id");

            entity.HasIndex(e => e.Name, "unique_child_account_name").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.ParentAccountId).HasColumnName("parent_account_id");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.ParentAccount).WithMany(p => p.ChildAccounts)
                .HasForeignKey(d => d.ParentAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("child_account_ibfk_1");

            entity.HasOne(d => d.User).WithMany(p => p.ChildAccounts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("child_account_ibfk_2");
        });

        modelBuilder.Entity<Childbalance>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("childbalances");

            entity.HasIndex(e => e.ChildAccountId, "child_account_id");

            entity.HasIndex(e => new { e.UserId, e.ChildAccountId }, "idx_childbalances_userid_childaccountid").IsUnique();

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Balance)
                .HasPrecision(15, 2)
                .HasColumnName("balance");
            entity.Property(e => e.ChildAccountId).HasColumnName("child_account_id");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.ChildAccount).WithMany(p => p.Childbalances)
                .HasForeignKey(d => d.ChildAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("childbalances_ibfk_2");

            entity.HasOne(d => d.User).WithMany(p => p.Childbalances)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("childbalances_ibfk_1");
        });

        modelBuilder.Entity<Costcenter>(entity =>
        {
            entity.HasKey(e => e.CostCenterId).HasName("PRIMARY");

            entity.ToTable("costcenters");

            entity.HasIndex(e => e.BranchId, "FK_CostCenter_Branch");

            entity.HasIndex(e => e.UserId, "FK_CostCenter_User");

            entity.Property(e => e.CostCenterId).HasColumnName("CostCenterID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CenterName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Costcenters)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CostCenter_Branch");

            entity.HasOne(d => d.User).WithMany(p => p.Costcenters)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CostCenter_User");
        });

        modelBuilder.Entity<Countrycurrency>(entity =>
        {
            entity.HasKey(e => e.CountryCurrencyId).HasName("PRIMARY");

            entity.ToTable("countrycurrency");

            entity.Property(e => e.CountryCurrencyId).HasColumnName("CountryCurrencyID");
            entity.Property(e => e.CountryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CurrencyName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.CurrencySymbol).HasMaxLength(10);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PRIMARY");

            entity.ToTable("customers");

            entity.HasIndex(e => e.UserId, "fk_customers_users");

            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.ContactInfo).HasMaxLength(255);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.CustomerName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User).WithMany(p => p.Customers)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_customers_users");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PRIMARY");

            entity.ToTable("employees");

            entity.HasIndex(e => e.BranchId, "FK_Employees_Branches");

            entity.HasIndex(e => e.StorehouseId, "FK_Employees_Storehouse");

            entity.HasIndex(e => e.UserId, "FK_Employees_Users");

            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Address).HasMaxLength(500);
            entity.Property(e => e.AllowSystemAccess)
                .HasDefaultValueSql("b'0'")
                .HasColumnType("bit(1)");
            entity.Property(e => e.Attachments).HasMaxLength(1000);
            entity.Property(e => e.AttendanceTime).HasColumnType("time");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.City).HasMaxLength(100);
            entity.Property(e => e.Country).HasMaxLength(100);
            entity.Property(e => e.DepartureTime).HasColumnType("time");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.FullName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.MobileNumber).HasMaxLength(20);
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.Password).HasMaxLength(255);
            entity.Property(e => e.Position)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.Region).HasMaxLength(100);
            entity.Property(e => e.Role).HasMaxLength(100);
            entity.Property(e => e.Salary).HasPrecision(10, 2);
            entity.Property(e => e.SecondaryMobileNumber).HasMaxLength(20);
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Employees)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Employees_Branches");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Employees)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Employees_Storehouse");

            entity.HasOne(d => d.User).WithMany(p => p.Employees)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK_Employees_Users");
        });

        modelBuilder.Entity<Exchange>(entity =>
        {
            entity.HasKey(e => e.ExchangeId).HasName("PRIMARY");

            entity.ToTable("exchange");

            entity.HasIndex(e => e.AccountId, "FK_Exchange_BankAccount");

            entity.HasIndex(e => e.CostCenterId, "FK_Exchange_CostCenter");

            entity.HasIndex(e => e.CustomerId, "FK_Exchange_Customer");

            entity.HasIndex(e => e.UserId, "FK_Exchange_User");

            entity.HasIndex(e => e.VendorId, "FK_Exchange_Vendor");

            entity.Property(e => e.ExchangeId).HasColumnName("ExchangeID");
            entity.Property(e => e.AccountId).HasColumnName("AccountID");
            entity.Property(e => e.Amount).HasPrecision(15, 2);
            entity.Property(e => e.CostCenterId).HasColumnName("CostCenterID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.Description).HasColumnType("text");
            entity.Property(e => e.ExchangeType)
                .IsRequired()
                .HasColumnType("enum('صرف','قبض')");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasColumnType("text");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Account).WithMany(p => p.Exchanges)
                .HasForeignKey(d => d.AccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exchange_BankAccount");

            entity.HasOne(d => d.CostCenter).WithMany(p => p.Exchanges)
                .HasForeignKey(d => d.CostCenterId)
                .HasConstraintName("FK_Exchange_CostCenter");

            entity.HasOne(d => d.Customer).WithMany(p => p.Exchanges)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_Exchange_Customer");

            entity.HasOne(d => d.User).WithMany(p => p.Exchanges)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Exchange_User");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Exchanges)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("FK_Exchange_Vendor");
        });

        modelBuilder.Entity<ExchangeChildAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("exchange_child_accounts");

            entity.HasIndex(e => e.ChildAccountId, "ChildAccountId");

            entity.HasIndex(e => e.ExchangeId, "idx_exchange_child_accounts_exchangeid");

            entity.Property(e => e.Amount).HasPrecision(15, 2);
            entity.Property(e => e.ExchangeId).HasColumnName("ExchangeID");

            entity.HasOne(d => d.ChildAccount).WithMany(p => p.ExchangeChildAccounts)
                .HasForeignKey(d => d.ChildAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("exchange_child_accounts_ibfk_2");

            entity.HasOne(d => d.Exchange).WithMany(p => p.ExchangeChildAccounts)
                .HasForeignKey(d => d.ExchangeId)
                .HasConstraintName("exchange_child_accounts_ibfk_1");
        });

        modelBuilder.Entity<Inventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PRIMARY");

            entity.ToTable("inventory");

            entity.HasIndex(e => e.EmployeeId, "FK_Inventory_Employee");

            entity.HasIndex(e => e.SessionId, "FK_Inventory_Session");

            entity.HasIndex(e => e.ProductId, "ProductID");

            entity.HasIndex(e => e.OrderId, "fk_inventory_order");

            entity.HasIndex(e => e.StorehouseId, "fk_inventory_storehouse");

            entity.HasIndex(e => e.UserId, "fk_inventory_user");

            entity.Property(e => e.InventoryId).HasColumnName("InventoryID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.LastUpdated)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.ReferenceId).HasColumnName("ReferenceID");
            entity.Property(e => e.ReferenceType)
                .IsRequired()
                .HasDefaultValueSql("'Invoice'")
                .HasColumnType("enum('Invoice','Adjustment','Transfer','Order')");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Employee).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_Inventory_Employee");

            entity.HasOne(d => d.Order).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_inventory_order");

            entity.HasOne(d => d.Product).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("inventory_ibfk_1");

            entity.HasOne(d => d.Session).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.SessionId)
                .HasConstraintName("FK_Inventory_Session");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_inventory_storehouse");

            entity.HasOne(d => d.User).WithMany(p => p.Inventories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_inventory_user");
        });

        modelBuilder.Entity<Invoice>(entity =>
        {
            entity.HasKey(e => e.InvoiceId).HasName("PRIMARY");

            entity.ToTable("invoices");

            entity.HasIndex(e => e.CustomerId, "CustomerID");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.CartId, "FK_Invoices_Cart");

            entity.HasIndex(e => e.Posid, "FK_Invoices_POS");

            entity.HasIndex(e => e.SessionId, "FK_Invoices_Session");

            entity.HasIndex(e => e.VendorId, "VendorID");

            entity.HasIndex(e => e.InvoiceBankAccountId, "fk_invoice_bank_account");

            entity.HasIndex(e => e.BranchId, "fk_invoice_branch");

            entity.HasIndex(e => e.InvoiceCashAccountId, "fk_invoice_cash_account");

            entity.HasIndex(e => e.UserId, "fk_invoice_user");

            entity.HasIndex(e => e.StorehouseId, "fk_invoices_storehouse");

            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CartId)
                .HasMaxLength(36)
                .HasColumnName("CartID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.InvoiceBankAccountId).HasColumnName("InvoiceBankAccountID");
            entity.Property(e => e.InvoiceCashAccountId).HasColumnName("InvoiceCashAccountID");
            entity.Property(e => e.InvoiceType)
                .HasDefaultValueSql("'بيع'")
                .HasColumnType("enum('شراء','بيع','مرتجع')");
            entity.Property(e => e.PaymentMethod)
                .HasDefaultValueSql("'نقدي'")
                .HasColumnType("enum('نقدي','تحويل بنكي','بطاقة ائتمانية','محفظة إلكترونية')");
            entity.Property(e => e.Posid).HasColumnName("POSID");
            entity.Property(e => e.PrintedAt).HasColumnType("datetime");
            entity.Property(e => e.PrintedCount).HasDefaultValueSql("'0'");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'غير مدفوعة'")
                .HasColumnType("enum('مدفوعة','غير مدفوعة','ملغاة')");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.SubscriptionPlan)
                .HasDefaultValueSql("'Basic'")
                .HasColumnType("enum('Basic','Standard','Premium')");
            entity.Property(e => e.Subtotal).HasPrecision(10, 2);
            entity.Property(e => e.TotalAmount)
                .HasPrecision(12, 2)
                .HasComputedColumnSql("`Subtotal` + coalesce(`VATAmount`,0)", true);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Vatamount)
                .HasPrecision(10, 2)
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("'15.00'")
                .HasColumnName("VATRate");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_invoice_branch");

            entity.HasOne(d => d.Customer).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("invoices_ibfk_1");

            entity.HasOne(d => d.Employee).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("invoices_ibfk_2");

            entity.HasOne(d => d.InvoiceBankAccount).WithMany(p => p.InvoiceInvoiceBankAccounts)
                .HasForeignKey(d => d.InvoiceBankAccountId)
                .HasConstraintName("fk_invoice_bank_account");

            entity.HasOne(d => d.InvoiceCashAccount).WithMany(p => p.InvoiceInvoiceCashAccounts)
                .HasForeignKey(d => d.InvoiceCashAccountId)
                .HasConstraintName("fk_invoice_cash_account");

            entity.HasOne(d => d.Pos).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.Posid)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Invoices_POS");

            entity.HasOne(d => d.Session).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.SessionId)
                .HasConstraintName("FK_Invoices_Session");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_invoices_storehouse");

            entity.HasOne(d => d.User).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_invoice_user");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Invoices)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("invoices_ibfk_3");
        });

        modelBuilder.Entity<Invoicedetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PRIMARY");

            entity.ToTable("invoicedetails");

            entity.HasIndex(e => e.CartId, "FK_InvoiceDetails_Cart");

            entity.HasIndex(e => e.InvoiceId, "InvoiceID");

            entity.HasIndex(e => e.ProductId, "ProductID");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.CartId)
                .HasMaxLength(36)
                .HasComment("References the original cart")
                .HasColumnName("CartID");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.InvoiceTyping)
                .HasDefaultValueSql("'بيع'")
                .HasColumnType("enum('شراء','بيع','مرتجع من الشراء','مرتجع من البيع')");
            entity.Property(e => e.LineTotal).HasPrecision(10, 2);
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.UnitPrice).HasPrecision(10, 2);
            entity.Property(e => e.VatAmount).HasPrecision(10, 2);

            entity.HasOne(d => d.Invoice).WithMany(p => p.Invoicedetails)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("invoicedetails_ibfk_1");

            entity.HasOne(d => d.Product).WithMany(p => p.Invoicedetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("invoicedetails_ibfk_2");
        });

        modelBuilder.Entity<JournalEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("journal_entry");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.HasIndex(e => e.CostCenterId, "fk_costcenter");

            entity.HasIndex(e => e.ChildAccountId, "fk_journal_child_account");

            entity.HasIndex(e => e.ExchangeId, "idx_journal_entry_exchangeid");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ChildAccountId).HasColumnName("child_account_id");
            entity.Property(e => e.CostCenterId).HasColumnName("CostCenterID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.CreditAmount)
                .HasPrecision(15, 2)
                .HasColumnName("credit_amount");
            entity.Property(e => e.DebitAmount)
                .HasPrecision(15, 2)
                .HasColumnName("debit_amount");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.EntryDate).HasColumnName("entry_date");
            entity.Property(e => e.ExchangeId).HasColumnName("ExchangeID");
            entity.Property(e => e.InvoiceId).HasColumnName("invoiceid");
            entity.Property(e => e.InvoiceType)
                .HasMaxLength(50)
                .HasColumnName("invoicetype");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.ChildAccount).WithMany(p => p.JournalEntries)
                .HasForeignKey(d => d.ChildAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_journal_child_account");

            entity.HasOne(d => d.Exchange).WithMany(p => p.JournalEntries)
                .HasForeignKey(d => d.ExchangeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_journal_entry_exchange");

            entity.HasOne(d => d.User).WithMany(p => p.JournalEntries)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("journal_entry_ibfk_1");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PRIMARY");

            entity.ToTable("orders");

            entity.HasIndex(e => e.CustomerId, "CustomerID");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.ProductId, "ProductID");

            entity.HasIndex(e => e.StorehouseId, "StorehouseID");

            entity.HasIndex(e => e.UserId, "fk_orders_users");

            entity.Property(e => e.OrderId).HasColumnName("OrderID");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.OrderType)
                .IsRequired()
                .HasColumnType("enum('اضافه','صرف','تحويل')");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.Total).HasPrecision(10, 2);
            entity.Property(e => e.UnitPrice).HasPrecision(10, 2);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders_ibfk_1");

            entity.HasOne(d => d.Employee).WithMany(p => p.Orders)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders_ibfk_4");

            entity.HasOne(d => d.Product).WithMany(p => p.Orders)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders_ibfk_3");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Orders)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("orders_ibfk_2");

            entity.HasOne(d => d.User).WithMany(p => p.Orders)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_orders_users");
        });

        modelBuilder.Entity<ParentAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("parent_account");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.HasIndex(e => e.AccountTypeId, "account_type_id");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.AccountTypeId).HasColumnName("account_type_id");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("name");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.AccountType).WithMany(p => p.ParentAccounts)
                .HasForeignKey(d => d.AccountTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("parent_account_ibfk_1");

            entity.HasOne(d => d.User).WithMany(p => p.ParentAccounts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("parent_account_ibfk_2");
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Payid).HasName("PRIMARY");

            entity.ToTable("payments");

            entity.HasIndex(e => e.CustomerId, "CustomerID");

            entity.HasIndex(e => e.InvoiceId, "FK_Payments_Invoices");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.HasIndex(e => e.VendorId, "VendorID");

            entity.Property(e => e.Payid).HasColumnName("payid");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.Notes)
                .HasColumnType("text")
                .HasColumnName("notes");
            entity.Property(e => e.Paydate).HasColumnName("paydate");
            entity.Property(e => e.PaymentMethod)
                .HasMaxLength(50)
                .HasColumnName("payment_method");
            entity.Property(e => e.PaymentStatus)
                .HasDefaultValueSql("'Draft'")
                .HasColumnType("enum('Draft','Pending','Paid','Partially Paid','Cancelled')")
                .HasColumnName("payment_status");
            entity.Property(e => e.TotalAmount)
                .HasPrecision(15, 2)
                .HasColumnName("total_amount");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Customer).WithMany(p => p.Payments)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("payments_ibfk_1");

            entity.HasOne(d => d.Invoice).WithMany(p => p.Payments)
                .HasForeignKey(d => d.InvoiceId)
                .HasConstraintName("FK_Payments_Invoices");

            entity.HasOne(d => d.User).WithMany(p => p.Payments)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("payments_ibfk_3");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Payments)
                .HasForeignKey(d => d.VendorId)
                .HasConstraintName("payments_ibfk_2");
        });

        modelBuilder.Entity<Paymentdetail>(entity =>
        {
            entity.HasKey(e => e.PaydetailId).HasName("PRIMARY");

            entity.ToTable("paymentdetails");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.HasIndex(e => e.Payid, "payid");

            entity.Property(e => e.PaydetailId).HasColumnName("paydetail_id");
            entity.Property(e => e.Amount)
                .HasPrecision(15, 2)
                .HasColumnName("amount");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("created_at");
            entity.Property(e => e.Description)
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.DueDate).HasColumnName("due_date");
            entity.Property(e => e.IsPaid)
                .HasDefaultValueSql("'0'")
                .HasColumnName("is_paid");
            entity.Property(e => e.PaidDate).HasColumnName("paid_date");
            entity.Property(e => e.Payid).HasColumnName("payid");
            entity.Property(e => e.UpdatedAt)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp")
                .HasColumnName("updated_at");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Pay).WithMany(p => p.Paymentdetails)
                .HasForeignKey(d => d.Payid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("paymentdetails_ibfk_1");

            entity.HasOne(d => d.User).WithMany(p => p.Paymentdetails)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("paymentdetails_ibfk_2");
        });

        modelBuilder.Entity<Po>(entity =>
        {
            entity.HasKey(e => e.Posid).HasName("PRIMARY");

            entity.ToTable("pos");

            entity.HasIndex(e => e.BankAccountId, "BankAccountID");

            entity.HasIndex(e => e.BranchId, "BranchID");

            entity.HasIndex(e => e.CashAccountId, "CashAccountID");

            entity.HasIndex(e => e.CartId, "FK_Transactions_Cart");

            entity.HasIndex(e => e.SessionId, "FK_Transactions_Session");

            entity.HasIndex(e => e.StorehouseId, "StorehouseID");

            entity.HasIndex(e => e.UserId, "fk_pos_users");

            entity.Property(e => e.Posid).HasColumnName("POSID");
            entity.Property(e => e.Attachments).HasColumnType("json");
            entity.Property(e => e.BankAccountId).HasColumnName("BankAccountID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CartId)
                .HasMaxLength(36)
                .HasColumnName("CartID");
            entity.Property(e => e.CashAccountId).HasColumnName("CashAccountID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.Posname)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("POSName");
            entity.Property(e => e.ReferenceNumber).HasMaxLength(100);
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'نشطة'")
                .HasColumnType("enum('نشطة','غير نشطة')");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.BankAccount).WithMany(p => p.PoBankAccounts)
                .HasForeignKey(d => d.BankAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_ibfk_3");

            entity.HasOne(d => d.Branch).WithMany(p => p.Pos)
                .HasForeignKey(d => d.BranchId)
                .HasConstraintName("pos_ibfk_1");

            entity.HasOne(d => d.CashAccount).WithMany(p => p.PoCashAccounts)
                .HasForeignKey(d => d.CashAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_ibfk_2");

            entity.HasOne(d => d.Session).WithMany(p => p.Pos)
                .HasForeignKey(d => d.SessionId)
                .HasConstraintName("FK_Transactions_Session");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Pos)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_ibfk_4");

            entity.HasOne(d => d.User).WithMany(p => p.Pos)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_pos_users");
        });

        modelBuilder.Entity<PosCart>(entity =>
        {
            entity.HasKey(e => new { e.CartId, e.ProductId })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

            entity.ToTable("pos_carts");

            entity.HasIndex(e => e.ProductId, "idx_cart_product");

            entity.HasIndex(e => new { e.SessionId, e.Status }, "idx_cart_session");

            entity.Property(e => e.CartId)
                .HasMaxLength(36)
                .HasColumnName("CartID");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.AddedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.DiscountPercent)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("'0.00'");
            entity.Property(e => e.Quantity).HasDefaultValueSql("'1'");
            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Completed','Cancelled')");
            entity.Property(e => e.UnitPrice).HasPrecision(10, 2);

            entity.HasOne(d => d.Product).WithMany(p => p.PosCarts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pos_carts_ibfk_2");

            entity.HasOne(d => d.Session).WithMany(p => p.PosCarts)
                .HasForeignKey(d => d.SessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pos_carts_ibfk_1");
        });

        modelBuilder.Entity<PosPaymentMethod>(entity =>
        {
            entity.HasKey(e => e.MethodId).HasName("PRIMARY");

            entity.ToTable("pos_payment_methods");

            entity.Property(e => e.MethodId).HasColumnName("MethodID");
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("'0'");
            entity.Property(e => e.Icon).HasMaxLength(50);
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.MethodName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.MethodType)
                .IsRequired()
                .HasColumnType("enum('Cash','CreditCard','DebitCard','MobilePayment','BankTransfer','Voucher')");
        });

        modelBuilder.Entity<PosSession>(entity =>
        {
            entity.HasKey(e => e.SessionId).HasName("PRIMARY");

            entity.ToTable("pos_sessions");

            entity.HasIndex(e => e.BranchId, "BranchID");

            entity.HasIndex(e => e.Posid, "POSID");

            entity.HasIndex(e => e.StorehouseId, "StorehouseID");

            entity.HasIndex(e => e.UserId, "fk_pos_sessions_users");

            entity.HasIndex(e => e.EmployeeId, "idx_session_employee");

            entity.HasIndex(e => e.Status, "idx_session_status");

            entity.Property(e => e.SessionId).HasColumnName("SessionID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.EndingCash).HasPrecision(15, 2);
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.Posid).HasColumnName("POSID");
            entity.Property(e => e.StartTime)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("datetime");
            entity.Property(e => e.StartingCash).HasPrecision(15, 2);
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Closed','Suspended')");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pos_sessions_ibfk_4");

            entity.HasOne(d => d.Employee).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("pos_sessions_ibfk_2");

            entity.HasOne(d => d.PosNavigation).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.Posid)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pos_sessions_ibfk_1");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("pos_sessions_ibfk_3");

            entity.HasOne(d => d.User).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_pos_sessions_users");
        });

        modelBuilder.Entity<PosTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PRIMARY");

            entity.ToTable("pos_transactions");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.InvoiceId, "InvoiceID");

            entity.Property(e => e.TransactionId).HasColumnName("TransactionID");
            entity.Property(e => e.AmountPaid).HasPrecision(10, 2);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.PaymentMethod)
                .HasDefaultValueSql("'نقدي'")
                .HasColumnType("enum('نقدي','تحويل بنكي','بطاقة ائتمانية','محفظة إلكترونية')");

            entity.HasOne(d => d.Employee).WithMany(p => p.PosTransactions)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("pos_transactions_ibfk_1");

            entity.HasOne(d => d.Invoice).WithMany(p => p.PosTransactions)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("pos_transactions_ibfk_2");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PRIMARY");

            entity.ToTable("products");

            entity.HasIndex(e => e.CategoryId, "FK_Products_Category");

            entity.HasIndex(e => e.StorehouseId, "fk_products_storehouse");

            entity.HasIndex(e => e.UserId, "fk_products_users");

            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Image).HasColumnType("mediumblob");
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.Price).HasPrecision(10, 2);
            entity.Property(e => e.ProductName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PurchasePrice).HasPrecision(10, 2);
            entity.Property(e => e.Qrcode)
                .HasMaxLength(255)
                .HasColumnName("QRCode");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Vatrate)
                .HasPrecision(5, 2)
                .HasDefaultValueSql("'0.00'")
                .HasColumnName("VATRate");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Products_Category");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Products)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_products_storehouse");

            entity.HasOne(d => d.User).WithMany(p => p.Products)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_products_users");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PRIMARY");

            entity.ToTable("product_categories");

            entity.HasIndex(e => e.UserId, "fk_product_categories_users");

            entity.Property(e => e.CategoryId).HasColumnName("CategoryID");
            entity.Property(e => e.CategoryName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.DisplayOrder).HasDefaultValueSql("'0'");
            entity.Property(e => e.Icon).HasColumnType("LONGBLOB"); // Changed to LONGBLOB for image data
            entity.Property(e => e.IsActive).HasDefaultValueSql("'1'");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.User)
                .WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_product_categories_users");
        });
        modelBuilder.Entity<Purchaseorder>(entity =>
        {
            entity.HasKey(e => e.PurchaseOrderId).HasName("PRIMARY");

            entity.ToTable("purchaseorders");

            entity.HasIndex(e => e.BranchId, "BranchID");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.StorehouseId, "StorehouseID");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.HasIndex(e => e.VendorId, "VendorID");

            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'مفتوح'")
                .HasColumnType("enum('مفتوح','مغلق','ملغى')");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.Subtotal).HasPrecision(10, 2);
            entity.Property(e => e.TotalAmount).HasPrecision(12, 2);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Vatamount)
                .HasPrecision(10, 2)
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasPrecision(5, 2)
                .HasColumnName("VATRate");
            entity.Property(e => e.VendorId).HasColumnName("VendorID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Purchaseorders)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchaseorders_ibfk_4");

            entity.HasOne(d => d.Employee).WithMany(p => p.Purchaseorders)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchaseorders_ibfk_2");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Purchaseorders)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchaseorders_ibfk_3");

            entity.HasOne(d => d.User).WithMany(p => p.Purchaseorders)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchaseorders_ibfk_5");

            entity.HasOne(d => d.Vendor).WithMany(p => p.Purchaseorders)
                .HasForeignKey(d => d.VendorId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("purchaseorders_ibfk_1");
        });

        modelBuilder.Entity<Purchaseorderdetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PRIMARY");

            entity.ToTable("purchaseorderdetails");

            entity.HasIndex(e => e.ProductId, "ProductID");

            entity.HasIndex(e => e.PurchaseOrderId, "PurchaseOrderID");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.Discount).HasPrecision(10, 2);
            entity.Property(e => e.DiscountType).HasMaxLength(50);
            entity.Property(e => e.LineTotal).HasPrecision(10, 2);
            entity.Property(e => e.ProductDescription).HasColumnType("text");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.PurchaseOrderId).HasColumnName("PurchaseOrderID");
            entity.Property(e => e.UnitPrice).HasPrecision(10, 2);
            entity.Property(e => e.VatAmount).HasPrecision(10, 2);

            entity.HasOne(d => d.Product).WithMany(p => p.Purchaseorderdetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("purchaseorderdetails_ibfk_2");

            entity.HasOne(d => d.PurchaseOrder).WithMany(p => p.Purchaseorderdetails)
                .HasForeignKey(d => d.PurchaseOrderId)
                .HasConstraintName("purchaseorderdetails_ibfk_1");
        });

        modelBuilder.Entity<Quotation>(entity =>
        {
            entity.HasKey(e => e.QuotationId).HasName("PRIMARY");

            entity.ToTable("quotations");

            entity.HasIndex(e => e.BranchId, "BranchID");

            entity.HasIndex(e => e.CustomerId, "CustomerID");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.InvoiceId, "InvoiceID");

            entity.HasIndex(e => e.StorehouseId, "StorehouseID");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.Property(e => e.QuotationId).HasColumnName("QuotationID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.CustomerId).HasColumnName("CustomerID");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'غير مفوتر'")
                .HasColumnType("enum('غير مفوتر','مفوتر','ملغاة')");
            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.Subtotal).HasPrecision(10, 2);
            entity.Property(e => e.TotalAmount).HasPrecision(12, 2);
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.Vatamount)
                .HasPrecision(10, 2)
                .HasColumnName("VATAmount");
            entity.Property(e => e.Vatrate)
                .HasPrecision(5, 2)
                .HasColumnName("VATRate");

            entity.HasOne(d => d.Branch).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("quotations_ibfk_5");

            entity.HasOne(d => d.Customer).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("quotations_ibfk_1");

            entity.HasOne(d => d.Employee).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("quotations_ibfk_2");

            entity.HasOne(d => d.Invoice).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("quotations_ibfk_4");

            entity.HasOne(d => d.Storehouse).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.StorehouseId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("quotations_ibfk_3");

            entity.HasOne(d => d.User).WithMany(p => p.Quotations)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("quotations_ibfk_6");
        });

        modelBuilder.Entity<Quotationdetail>(entity =>
        {
            entity.HasKey(e => e.DetailId).HasName("PRIMARY");

            entity.ToTable("quotationdetails");

            entity.HasIndex(e => e.ProductId, "ProductID");

            entity.HasIndex(e => e.QuotationId, "QuotationID");

            entity.Property(e => e.DetailId).HasColumnName("DetailID");
            entity.Property(e => e.Discount).HasPrecision(10, 2);
            entity.Property(e => e.DiscountType)
                .IsRequired()
                .HasDefaultValueSql("'amount'")
                .HasColumnType("enum('percentage','amount')");
            entity.Property(e => e.LineTotal).HasPrecision(10, 2);
            entity.Property(e => e.ProductDescription).HasColumnType("text");
            entity.Property(e => e.ProductId).HasColumnName("ProductID");
            entity.Property(e => e.QuotationId).HasColumnName("QuotationID");
            entity.Property(e => e.TotalWithVat).HasPrecision(10, 2);
            entity.Property(e => e.UnitPrice).HasPrecision(10, 2);
            entity.Property(e => e.VatAmount).HasPrecision(10, 2);

            entity.HasOne(d => d.Product).WithMany(p => p.Quotationdetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("quotationdetails_ibfk_2");

            entity.HasOne(d => d.Quotation).WithMany(p => p.Quotationdetails)
                .HasForeignKey(d => d.QuotationId)
                .HasConstraintName("quotationdetails_ibfk_1");
        });

        modelBuilder.Entity<Shift>(entity =>
        {
            entity.HasKey(e => e.ShiftId).HasName("PRIMARY");

            entity.ToTable("shifts");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.Posid, "POSID");

            entity.HasIndex(e => e.UserId, "fk_shifts_users");

            entity.Property(e => e.ShiftId).HasColumnName("ShiftID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.Posid).HasColumnName("POSID");
            entity.Property(e => e.RepeatDays).HasMaxLength(255);
            entity.Property(e => e.RepeatWeekly).HasDefaultValueSql("'0'");
            entity.Property(e => e.StartDateTime).HasColumnType("datetime");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Employee).WithMany(p => p.Shifts)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("shifts_ibfk_1");

            entity.HasOne(d => d.Pos).WithMany(p => p.Shifts)
                .HasForeignKey(d => d.Posid)
                .HasConstraintName("shifts_ibfk_2");

            entity.HasOne(d => d.User).WithMany(p => p.Shifts)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_shifts_users");
        });

        modelBuilder.Entity<Sitestat>(entity =>
        {
            entity.HasKey(e => e.StatId).HasName("PRIMARY");

            entity.ToTable("sitestats");

            entity.Property(e => e.StatId).HasColumnName("StatID");
            entity.Property(e => e.LastUpdated)
                .ValueGeneratedOnAddOrUpdate()
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.PageName)
                .IsRequired()
                .HasMaxLength(255);
        });

        modelBuilder.Entity<Storehouse>(entity =>
        {
            entity.HasKey(e => e.StorehouseId).HasName("PRIMARY");

            entity.ToTable("storehouse");

            entity.HasIndex(e => e.BranchId, "FK_Storehouse_Branches");

            entity.HasIndex(e => e.UserId, "fk_storehouse_users");

            entity.Property(e => e.StorehouseId).HasColumnName("StorehouseID");
            entity.Property(e => e.BranchId).HasColumnName("BranchID");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.CurrentQuantity).HasDefaultValueSql("'0'");
            entity.Property(e => e.DetailedLocation).HasColumnType("text");
            entity.Property(e => e.Location).HasMaxLength(255);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'1'");
            entity.Property(e => e.StorehouseName)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.SubLocation).HasMaxLength(255);
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Branch).WithMany(p => p.Storehouses)
                .HasForeignKey(d => d.BranchId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("FK_Storehouse_Branches");

            entity.HasOne(d => d.User).WithMany(p => p.Storehouses)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("fk_storehouse_users");
        });

        modelBuilder.Entity<Transfer>(entity =>
        {
            entity.HasKey(e => e.TransferId).HasName("PRIMARY");

            entity.ToTable("transfers");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.InvoiceId, "InvoiceID");

            entity.HasIndex(e => e.UserId, "fk_transfer_user");

            entity.HasIndex(e => e.FromAccountId, "fk_transfers_fromaccount");

            entity.HasIndex(e => e.ToAccountId, "fk_transfers_toaccount");

            entity.Property(e => e.TransferId).HasColumnName("TransferID");
            entity.Property(e => e.Amount).HasPrecision(15, 2);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.FromAccountId).HasColumnName("FromAccountID");
            entity.Property(e => e.InvoiceId).HasColumnName("InvoiceID");
            entity.Property(e => e.Notes).HasColumnType("text");
            entity.Property(e => e.ToAccountId).HasColumnName("ToAccountID");
            entity.Property(e => e.TransferDate)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Type)
                .IsRequired()
                .HasColumnType("enum('اضافة','صرف')");
            entity.Property(e => e.UserId).HasColumnName("UserID");

            entity.HasOne(d => d.Employee).WithMany(p => p.Transfers)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("transfers_ibfk_3");

            entity.HasOne(d => d.FromAccount).WithMany(p => p.TransferFromAccounts)
                .HasForeignKey(d => d.FromAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_transfers_fromaccount");

            entity.HasOne(d => d.Invoice).WithMany(p => p.Transfers)
                .HasForeignKey(d => d.InvoiceId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("transfers_ibfk_4");

            entity.HasOne(d => d.ToAccount).WithMany(p => p.TransferToAccounts)
                .HasForeignKey(d => d.ToAccountId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("fk_transfers_toaccount");

            entity.HasOne(d => d.User).WithMany(p => p.Transfers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("fk_transfer_user");
        });

        modelBuilder.Entity<TriggerLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.ToTable("trigger_log");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Action)
                .HasMaxLength(50)
                .HasColumnName("action");
            entity.Property(e => e.Amount)
                .HasPrecision(18, 2)
                .HasColumnName("amount");
            entity.Property(e => e.ChildAccountId).HasColumnName("child_account_id");
            entity.Property(e => e.CreatedAt)
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.TriggerName)
                .HasMaxLength(100)
                .HasColumnName("trigger_name");
            entity.Property(e => e.UserId).HasColumnName("user_id");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");

            entity.ToTable("users");

            entity.HasIndex(e => e.Email, "Email").IsUnique();

            entity.HasIndex(e => e.Username, "Username").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.AutoRenewal).HasDefaultValueSql("'1'");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.PasswordHash)
                .IsRequired()
                .HasMaxLength(255);
            entity.Property(e => e.PaymentStatus)
                .HasDefaultValueSql("'Active'")
                .HasColumnType("enum('Active','Pending','Expired')");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.SubscriptionPlan)
                .HasDefaultValueSql("'Light'")
                .HasColumnType("enum('Light','Standard','Professional','Advanced')");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(100);
        });

        modelBuilder.Entity<Vendor>(entity =>
        {
            entity.HasKey(e => e.VendorId).HasName("PRIMARY");

            entity.ToTable("vendors");

            entity.HasIndex(e => e.EmployeeId, "EmployeeID");

            entity.HasIndex(e => e.UserId, "UserID");

            entity.Property(e => e.VendorId).HasColumnName("VendorID");
            entity.Property(e => e.Classification).HasMaxLength(100);
            entity.Property(e => e.CommercialRegister).HasMaxLength(100);
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("CURRENT_TIMESTAMP")
                .HasColumnType("timestamp");
            entity.Property(e => e.CreditLimit).HasPrecision(15, 2);
            entity.Property(e => e.Currency)
                .HasMaxLength(3)
                .HasDefaultValueSql("'SAR'");
            entity.Property(e => e.Email).HasMaxLength(255);
            entity.Property(e => e.EmployeeId).HasColumnName("EmployeeID");
            entity.Property(e => e.Location).HasColumnType("text");
            entity.Property(e => e.PhoneNumber1)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.PhoneNumber2).HasMaxLength(20);
            entity.Property(e => e.TaxNumber).HasMaxLength(50);
            entity.Property(e => e.TaxableCheck).HasDefaultValueSql("'1'");
            entity.Property(e => e.UserId).HasColumnName("UserID");
            entity.Property(e => e.VendorName)
                .IsRequired()
                .HasMaxLength(255);

            entity.HasOne(d => d.Employee).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.SetNull)
                .HasConstraintName("vendors_ibfk_2");

            entity.HasOne(d => d.User).WithMany(p => p.Vendors)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("vendors_ibfk_1");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}